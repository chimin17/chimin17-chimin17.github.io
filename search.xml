<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>鐵人賽2019 Day04 幾何資料基本運算</title>
      <link href="/2018/10/19/ironman-2019-day04/"/>
      <url>/2018/10/19/ironman-2019-day04/</url>
      
        <content type="html"><![CDATA[<p>GeoDataFrame使操作GIS資料分析時更有彈性<br>我們可以很快對GIS的屬性資料的分析與過濾</p><p>當然，也包括一些幾何空間的運算</p><h2 id="坐標轉換"><a href="#坐標轉換" class="headerlink" title="坐標轉換"></a>坐標轉換</h2><p>坐標轉換幾乎是GIS第一門課，可以參考<a href="https://ithelp.ithome.com.tw/articles/10194371" target="_blank" rel="noopener">[Day10] 坐標系統及WebGIS常用的坐標轉換</a>有大致的說明。</p><a id="more"></a><p>Geopandas依賴pyrpoj，坐標轉換操作也很簡單<br>我們以昨天的圖書館資料為例，它是epsg4326，試著轉成TWD97(epsg3826)</p><blockquote><p>有關讀書館資料，請參考<a href="https://ithelp.ithome.com.tw/articles/10202839" target="_blank" rel="noopener">Day03 從Pandas到Geopandas的幾種方法</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import geopandas as gpd</span><br><span class="line">gdf_Lib=gpd.read_file(&apos;output/Library.shp&apos;,encoding=&apos;utf-8&apos;)</span><br><span class="line">gdf_Lib.crs = &#123;&apos;init&apos; :&apos;epsg:4326&apos;&#125; # 避免資料沒設，這邊再重新給一次</span><br><span class="line">gdf_Lib=gdf_Lib.to_crs(epsg=3826)</span><br><span class="line">gdf_Lib</span><br></pre></td></tr></table></figure><p><img src="/2018/10/19/ironman-2019-day04/a3f51b10.png" alt=""></p><p>可以看到坐標系統已經成果轉換(4326–&gt;3826)</p><h2 id="幾何操作"><a href="#幾何操作" class="headerlink" title="幾何操作"></a>幾何操作</h2><p>接下來來進行基本的幾何運算，<br>Geopandas的幾何操作主要是來自shaply套件，以下來試看看在GIS軟體常用的功能</p><h3 id="buffer"><a href="#buffer" class="headerlink" title="buffer"></a>buffer</h3><p>buffer在GIS中常用來分析點線面的影響範圍，<br>這邊採用上面圖書館的資料<br>採用buffer這個方法，參數為環域距離<br>由於坐標系統已經轉為TWD97，因此距離的單為為公尺</p><p>而為了做比較，我們只取資料的第一筆，並把原始的點位放上去。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">base=gdf_Lib.head(1).buffer(100).plot()</span><br><span class="line"></span><br><span class="line">gdf_Lib.head(1).plot(ax=base, marker=&apos;o&apos;, color=&apos;red&apos;, markersize=30);</span><br></pre></td></tr></table></figure></p><p><img src="/2018/10/19/ironman-2019-day04/3820e1d2.png" alt=""></p><h3 id="area"><a href="#area" class="headerlink" title="area"></a>area</h3><p>area是GeoDataFrame所有每一筆資料的面積<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">buffer=gdf_Lib.head(1).buffer(100)</span><br><span class="line">area=buffer.area</span><br><span class="line">print(area[0])</span><br><span class="line"></span><br><span class="line">### # 0 31365.4849055</span><br></pre></td></tr></table></figure></p><h3 id="envelope"><a href="#envelope" class="headerlink" title="envelope"></a>envelope</h3><p>envelope是整個GeoDataFrame每一筆資料涵蓋的長方形範圍<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">envelope=buffer.envelope</span><br><span class="line">print(envelope)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 0    POLYGON ((295824.3464126067 2765944.031022599,...</span><br></pre></td></tr></table></figure></p><h3 id="convex-hull"><a href="#convex-hull" class="headerlink" title="convex_hull"></a>convex_hull</h3><p>跟convex hull則是包住每一個資料的多邊形<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">convexhull=buffer.convex_hull</span><br><span class="line">print(convexhull)</span><br><span class="line"></span><br><span class="line">### 0    POLYGON ((295924.3464126067 2765944.031022599,...</span><br></pre></td></tr></table></figure></p><p>可以Plot一下convex hull，與點位一起套疊<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">base=envelope.plot()</span><br><span class="line">convexhull.plot(ax=base,color=&apos;brown&apos;)</span><br><span class="line">gdf_Lib.head(1).plot(ax=base,  color=&apos;red&apos;);</span><br></pre></td></tr></table></figure></p><p>可以發現convex hull與envelope的差異，並且convex hull與buffer的結果一樣(因為包住圓的convex hull 也是圓..不好意思這個例子舉不太好)<br><img src="/2018/10/19/ironman-2019-day04/2f1835c5.png" alt=""></p><h3 id="幾何轉換"><a href="#幾何轉換" class="headerlink" title="幾何轉換"></a>幾何轉換</h3><p>可以進行幾何的投影轉換，可以對資料進行仿射轉換(Affine Transform)，包含了兩個平移、兩個尺度、一個剪力以及一個旋轉</p><p>這邊只舉尺度轉換的例子，分別在x方向10倍及y方向5倍的投影，並與原本的buffer做比較。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">base=buffer.scale(10,5).plot(color=&apos;yellow&apos;)</span><br><span class="line">buffer.plot(ax=base,color=&apos;brown&apos;)</span><br></pre></td></tr></table></figure></p><p>其餘的一些操作在Shapely的官方文件有滿多說明的，特別是對幾何資料的一些檢查，建議有需要時瀏覽一遍Shapely的參考文件<br><a href="http://toblerity.org/shapely/manual.html" target="_blank" rel="noopener">The Shapely User Manual — Shapely 1.2 and 1.3 documentation</a></p><h2 id="空間運算子"><a href="#空間運算子" class="headerlink" title="空間運算子"></a>空間運算子</h2><p>前半部說明的主要為資料內部的計算，在此空間運算子是屬於資料與資料之間的運算與分析</p><p>常見的GIS運算包含了幾項運算子，如<br><img src="/2018/10/19/ironman-2019-day04/cd202466.png" alt="取自GeoPandas">[取自Geopandas官方]</p><p>為了方便說明，我們把前面buffer的成果做一些處理，<br>p1是把buffer成果做一些平移，p2則是原本buffer的結果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">p1=gpd.read_file(&apos;output/Library.shp&apos;,encoding=&apos;utf-8&apos;).head(1)</span><br><span class="line">p1.crs = &#123;&apos;init&apos; :&apos;epsg:4326&apos;&#125; # 避免資料沒設，這邊再重新給一次</span><br><span class="line">p1=p1.to_crs(epsg=3826)</span><br><span class="line">p1[&apos;geometry&apos;]=p1.buffer(30).translate(xoff=20.0, yoff=0.0)</span><br><span class="line"></span><br><span class="line">p2=gpd.read_file(&apos;output/Library.shp&apos;,encoding=&apos;utf-8&apos;).head(1)</span><br><span class="line">p2.crs = &#123;&apos;init&apos; :&apos;epsg:4326&apos;&#125; # 避免資料沒設，這邊再重新給一次</span><br><span class="line">p2=p2.to_crs(epsg=3826)</span><br><span class="line">p2[&apos;geometry&apos;]=p2.buffer(30)</span><br></pre></td></tr></table></figure></p><p><img src="/2018/10/19/ironman-2019-day04/97e3e9a9.png" alt=""></p><h3 id="intersection"><a href="#intersection" class="headerlink" title="intersection"></a>intersection</h3><p>intersection是交集，我們分別使用不同的顏色，交集的部分是黃色<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">intersection = gpd.overlay(p1,p2,  how=&apos;intersection&apos;)</span><br><span class="line">base=p1.plot(color=&apos;blue&apos;)</span><br><span class="line">p2.plot(ax=base,color=&apos;brown&apos;)</span><br><span class="line">intersection.plot(ax=base,color=&apos;yellow&apos;)</span><br></pre></td></tr></table></figure></p><p><img src="/2018/10/19/ironman-2019-day04/4af333a6.png" alt=""></p><h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><p>聯集<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">union = gpd.overlay(p1,p2,  how=&apos;union&apos;)</span><br><span class="line">base=p1.plot(color=&apos;blue&apos;)</span><br><span class="line">p2.plot(ax=base,color=&apos;brown&apos;)</span><br><span class="line">union.plot(ax=base,color=&apos;yellow&apos;)</span><br></pre></td></tr></table></figure></p><p><img src="/2018/10/19/ironman-2019-day04/bd276c9e.png" alt=""></p><h3 id="difference"><a href="#difference" class="headerlink" title="difference"></a>difference</h3><p>算出兩個幾何的差異，一樣以黃色表示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">difference = gpd.overlay(p1,p2,  how=&apos;difference&apos;)</span><br><span class="line">base=p1.plot(color=&apos;blue&apos;)</span><br><span class="line">p2.plot(ax=base,color=&apos;brown&apos;)</span><br><span class="line">difference.plot(ax=base,color=&apos;yellow&apos;)</span><br></pre></td></tr></table></figure></p><p><img src="/2018/10/19/ironman-2019-day04/9efb6e0e.png" alt=""></p><p>以上就簡單測試一些幾何運算子，未來幾天有機會會在應用到這些方法</p>]]></content>
      
      
      <categories>
          
          <category> data analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> 2019鐵人賽-30天精通GIS資料分析-使用Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽2019 Day03 從Pandas到Geopandas的幾種方法</title>
      <link href="/2018/10/18/ironman-2019-day03/"/>
      <url>/2018/10/18/ironman-2019-day03/</url>
      
        <content type="html"><![CDATA[<p>Geopandas可以讀取各GIS格式進行空間運算，然而實際上我們可能會拿到的資料不見得會是GIS的格式<br>雖然不是GIS格式，但它可能是有坐標資訊的資料</p><p>比較常見的會是一個csv,Excel含有經緯度或xy的資料，對於這樣的資料，我們可以把它轉為<code>Geopandas</code>的<code>GeoDataFrame</code>。</p><a id="more"></a><h2 id="用Pandas讀取csv或Excel"><a href="#用Pandas讀取csv或Excel" class="headerlink" title="用Pandas讀取csv或Excel"></a>用Pandas讀取csv或Excel</h2><p>為了今天的範例，我們下載[<a href="https://data.gov.tw/dataset/26689" target="_blank" rel="noopener">新北市路燈資料</a>]，下載該數據的csv檔，命名為Light.csv<br>第一步先使用Pandas讀取csv為DataFrame<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd </span><br><span class="line">df=pd.read_csv(&apos;data/Light/Light.csv&apos;,encoding=&apos;utf-8&apos;)</span><br></pre></td></tr></table></figure></p><p><img src="/2018/10/18/ironman-2019-day03/73455e36.png" alt=""></p><blockquote><p>ps.如果沒有pandas請記得安裝<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install pandas</span><br></pre></td></tr></table></figure></p></blockquote><p>瀏覽一下這份資料可以看到這份資料具有TWD97X, TWD97Y坐標的資料。<br>接下來，我們試著把X,Y轉換成GeoDataFrame</p><h2 id="DataFrame轉為Geodataframe"><a href="#DataFrame轉為Geodataframe" class="headerlink" title="DataFrame轉為Geodataframe"></a>DataFrame轉為Geodataframe</h2><p>前一天提到GeoDataFrame主要是包含geometry的屬性，<br>因此，要產生GeoDataFrame，需要產生<code>geometry</code><br>這時候需要用shapely套件中的geometry<br>我們使用之中的Point類型，並把TWD97X, TWD97Y包成geom<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from shapely.geometry import Point</span><br><span class="line">import geopandas as gpd</span><br><span class="line">geom = [Point(xy) for xy in zip(df.TWD97X, df.TWD97Y)]</span><br></pre></td></tr></table></figure></p><p>有了<code>geom</code>，我們可以用來產生<code>GeoDataFrame</code>，<br>其中，需要指定crs，由於TWD97X, TWD97Y的坐標是TWD97，為epsg:3826</p><blockquote><p><a href="https://ithelp.ithome.com.tw/articles/10194371" target="_blank" rel="noopener">[Day10] 坐標系統及WebGIS常用的坐標轉換</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">crs = &#123;&apos;init&apos;: &apos;epsg:3826&apos;&#125;</span><br><span class="line">gdf = gpd.GeoDataFrame(df, crs=crs, geometry=geom)</span><br><span class="line">gdf</span><br></pre></td></tr></table></figure></p></blockquote><p><img src="/2018/10/18/ironman-2019-day03/61ef1ed0.png" alt=""></p><p>就這樣，我們成功把csv轉成了GeoDataFrame，<br>然後我們就可以做GeoDataFrame能做的事<br>把永和區的資料畫圖來，並以<code>address</code>為color code繪圖，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdf[gdf[&apos;district&apos;]==&apos;永和區&apos;].plot(column=&apos;address&apos;)</span><br></pre></td></tr></table></figure></p><p><img src="/2018/10/18/ironman-2019-day03/6f3ecaf0.png" alt="Screen Shot 2018-10-17 at 21.07.31.png"></p><h2 id="Geocoding"><a href="#Geocoding" class="headerlink" title="Geocoding"></a>Geocoding</h2><p>像是今天的資料集[<a href="https://data.gov.tw/dataset/26689" target="_blank" rel="noopener">新北市路燈資料</a>]是一個具有XY的資料，<br>如果今天資料中沒有XY，我們還是可以透過一些Geocoding方法取得坐標<br>在<a href="https://ithelp.ithome.com.tw/articles/10194193" target="_blank" rel="noopener">[Day 9] 自己產製資料-地址定位part2</a>提到可以使用TGOS來進行門牌地址的Geocoding。</p><p>為了一次性的完成Geocoding，接下來以<a href="https://developer.tomtom.com/online-search/online-search-documentation-geocoding/geocode" target="_blank" rel="noopener">TomTom Developer Portal Geocode</a>的Geocoding為例(個人經驗是會有較好的成果)</p><p>首先，必須要取得一個api key，方法很簡單，按照官網方法操作就好<a href="https://developer.tomtom.com/user/login" target="_blank" rel="noopener">User account | TomTom Developer Portal</a></p><p>假設以順利取得api的key，我們現在以<a href="https://data.gov.tw/dataset/26601" target="_blank" rel="noopener">新北市各圖書館地址電話表</a>為範例，下載csv使用</p><p>首先，跟上面一樣，用Pandas讀取csv<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd </span><br><span class="line">df=pd.read_csv(&apos;data/Library/Library.csv&apos;,encoding=&apos;utf-8&apos;)</span><br><span class="line">df</span><br></pre></td></tr></table></figure></p><p><img src="/2018/10/18/ironman-2019-day03/059467f1.png" alt=""></p><p>接著我們寫一個函式處理Geocoding，呼叫的方法及回應的格式直接參考<a href="https://developer.tomtom.com/online-search/online-search-documentation-geocoding/geocode" target="_blank" rel="noopener">TomTom Developer Portal Geocode</a>的說明</p><p>其中，<code>YOUR_KEY</code>必須填入你的api key!<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import requests,json</span><br><span class="line">def rest(address):</span><br><span class="line"></span><br><span class="line">    url = &apos;https://api.tomtom.com/search/2/geocode/&#123;&#125;.json?&amp;key=YOUR_KEY&amp;countrySet=TWN&amp;language=zh-TW&amp;limit=1&apos;.format(</span><br><span class="line">        address)</span><br><span class="line">    response = requests.get(url)</span><br><span class="line">    data = response.text</span><br><span class="line">    js = json.loads(str(data))</span><br><span class="line">    return js[&apos;results&apos;][0][&apos;position&apos;]</span><br></pre></td></tr></table></figure></p><blockquote><p>ps. requests需要安裝，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install requests</span><br></pre></td></tr></table></figure></p></blockquote><p>然後使用這個rest函式，產生geometry(命名為geom)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 這邊使用df.head()只取前五筆測試</span><br><span class="line">geom=[Point(rest(row.address)) for idx, row in df.head().iterrows()]</span><br></pre></td></tr></table></figure><p>有了geom就可以產生GeoDataFrame了，要注意的是，<br>這邊的坐標是WGS84，也就是epsg:4326<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">crs = &#123;&apos;init&apos;: &apos;epsg:4326&apos;&#125;</span><br><span class="line">gdf = gpd.GeoDataFrame(df.head(), crs=crs, geometry=geom)</span><br><span class="line">gdf</span><br></pre></td></tr></table></figure></p><p><img src="/2018/10/18/ironman-2019-day03/28d89d47.png" alt=""></p><p>一樣，看看成果吧</p><p><img src="/2018/10/18/ironman-2019-day03/49526754.png" alt=""></p><p>GeoDataFrame可以輸出成GIS格式，用以在其他平台檢視與處理，包含常用的shp或是geojson<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdf.to_file(driver = &apos;ESRI Shapefile&apos;, filename = &apos;output/Light.shp&apos;)</span><br></pre></td></tr></table></figure></p><blockquote><p>今天的相關測試可以參考<a href="https://github.com/chimin17/2019_30day/blob/master/Day03_Pandas2GeoPandas.ipynb" target="_blank" rel="noopener">GitHub</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> data analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> 2019鐵人賽-30天精通GIS資料分析-使用Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽2019 Day02 Geopandas初探</title>
      <link href="/2018/10/17/ironman-2019-day02/"/>
      <url>/2018/10/17/ironman-2019-day02/</url>
      
        <content type="html"><![CDATA[<p><code>Pandas</code>是資料分析熱門且好用的工具，熟悉資料分析的人應該都不陌生，GIS相關的Python套件也是滿坑滿谷，這邊我們選定<code>Geopandas</code>作為資料操作的基礎，它與Pandas有很接近的操作體驗，並且依賴了許多GIS常用的Python套件。</p><h2 id="Geopandas介紹"><a href="#Geopandas介紹" class="headerlink" title="Geopandas介紹"></a>Geopandas介紹</h2><p>在Python上處理空間資料有許多套件們，這些套件都有不同的使用場景，例如<code>shapely</code>用在向量資料的處理、<code>fiona</code>則是幫助在Python上操作<code>OGR</code>(支援超多格式的資料轉換)，<code>pyproj</code>做坐標投影的轉換(參考文獻)等等。</p><a id="more"></a><p>還好，<code>Geopandas</code>的出現，不僅讓這些事情在變得比較好上手，還讓分析資料時感受很像Pandas，<br>他主要依賴了以下Python空間資料處理的套件介面：</p><ul><li>shapely</li><li>fiona</li><li>descartes</li><li>matplotlib</li><li>pyproj</li><li>numpy<br>..more</li></ul><hr><p>使用者可以跟Pandas操作DataFrame一般，在Geopandas操作GeoDataFrame，並且擁有許多空間資料處理的功能。<br>在Python環境中使用GeoPandas，依照官方文件的說明，安裝方法有兩種，第一種是使用Conda(請設定Python3.6環境)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c conda-forge geopandas</span><br></pre></td></tr></table></figure><p>或是直接透過Geopandas Repo以pip安裝</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install git+git://github.com/geopandas/geopandas.git</span><br></pre></td></tr></table></figure><h2 id="讀寫GIS資料"><a href="#讀寫GIS資料" class="headerlink" title="讀寫GIS資料"></a>讀寫GIS資料</h2><p>今天所使用的GIS資料為<code>向量</code>資料<br>其中shp為空間資料中最為常見的一種向量資料的格式，<br>它可以紀錄點、線、面等幾何</p><blockquote><p>有關向量資料及格式的暸解，可以參考<br><a href="https://ithelp.ithome.com.tw/articles/10193701" target="_blank" rel="noopener">[Day 6] 常見的GIS資料格式 - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天</a></p></blockquote><p>我們可以利用GeoPandas讀取shp資料，以進行我們想要的各種處理或分析，以[<a href="https://data.gov.tw/dataset/73220" target="_blank" rel="noopener">臺灣鐵路 | 政府資料開放平臺</a>]這個資料集為例，我們將其下載到本機，使用GeoPandas讀取為GeoDataFrame</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import geopandas as gpd</span><br><span class="line">gdf_Rail=gpd.read_file(&apos;data/Rail/Rail.shp&apos;,encoding=&apos;utf-8&apos;)</span><br><span class="line">gdf_Rail</span><br></pre></td></tr></table></figure><p><img src="/2018/10/17/ironman-2019-day02/e58211a8.png" alt=""></p><p>GeoPandas也支援常用的格式</p><h2 id="GeoDataFrame"><a href="#GeoDataFrame" class="headerlink" title="GeoDataFrame"></a>GeoDataFrame</h2><p>GeoDataFrame與DataFrame類似，在[<a href="http://geopandas.org/data_structures.html" target="_blank" rel="noopener">官方文件</a>]中對於DataFrame的基本類型有一些說明。</p><blockquote><p>簡單來說，與dataframe相對，GeoPandas多了一個geometry的欄位。</p></blockquote><hr><h2 id="Like-a-DataFrame"><a href="#Like-a-DataFrame" class="headerlink" title="Like a DataFrame"></a>Like a DataFrame</h2><p>GeoDataFrame的許多基本操作與Pandas的DataFrame很<br>我們試著做一些Pandas上可以做的事情，</p><p>選擇欄位<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subset=gdf_Rail[&apos;RAILNAME&apos;]</span><br></pre></td></tr></table></figure></p><p><img src="/2018/10/17/ironman-2019-day02/a478244e.png" alt=""><br>subset again<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subset=gdf_Rail.iloc[:3]</span><br></pre></td></tr></table></figure></p><p><img src="/2018/10/17/ironman-2019-day02/ca9cb4ab.png" alt=""><br>排序資料<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sample=gdf_Rail.sort_values(by=&apos;MDATE&apos;)</span><br></pre></td></tr></table></figure></p><p><img src="/2018/10/17/ironman-2019-day02/34a71488.png" alt=""></p><p>另外，GeoDataFrame對於地理資料有基本的繪圖功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sample.plot()</span><br></pre></td></tr></table></figure><p><img src="/2018/10/17/ironman-2019-day02/84d97c63.png" alt=""><br>其採用matplotlib繪圖引擎，例如可以依照欄位來繪圖(下面案例是以鐵道支線名稱分色)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sample.plot(column=&apos;RAILNAME&apos;)</span><br></pre></td></tr></table></figure></p><p><img src="/2018/10/17/ironman-2019-day02/1eaa9264.png" alt=" "><br>GeoDataFrame讓GIS資料處理更方便，他與DataFrame操作體驗接近，今天也初探了一些簡單的功能</p><p>對於DataFrame或者GeoDataFrame的操作，可以參考<a href="https://pandas.pydata.org/Pandas_Cheat_Sheet.pdf" target="_blank" rel="noopener">Data wrangling with Pandas</a>的圖表，<br>對於Pandas的功能有一些快速指南，大部分也都通用於Geopandas。</p><blockquote><p>今天的相關測試可以參考<a href="https://github.com/chimin17/2019_30day/blob/master/Day02_Geopandas.ipynb" target="_blank" rel="noopener">GitHub</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> data analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> 2019鐵人賽-30天精通GIS資料分析-使用Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽2019 Day01 前言</title>
      <link href="/2018/10/16/ironman-2019-day01/"/>
      <url>/2018/10/16/ironman-2019-day01/</url>
      
        <content type="html"><![CDATA[<p>地理空間資料或簡稱GIS資料，無論是學術研究、資料科學、商業分析、或是各種資料採集等，或多或少都需要與空間資料相處。</p><p>或許各路GIS相關的工作者，常會覺得明明<code>空間資料</code>與<code>非空間資料</code>差異只在於有無坐標資料，但實際處理起來卻常常遇到各種坑苦。</p><p>有感於此，希望藉由這次<code>鐵人賽</code>的砥礪，攻略實務上處理GIS資料時<code>更進階</code>及更<code>自動化</code>的工具與技巧。</p><blockquote><p>這次30天的任務，主要以<code>Python</code>為主軸，配合<code>QGIS</code>及<code>空間資料庫</code>，熟悉GIS工作的<code>自動化</code>流程，解決空間資料分析或是資料工程上的問題。</p></blockquote><a id="more"></a><hr><p>雖然QGIS及ArcGIS中，也支援Python程式的包裝PyQGIS與ArcPy，使用者可以撰寫程式、拉Model或是Macro等，在許多情境下，已經可以解決大多數問題。</p><p>然而GIS資料常是眾多資料流的一部分，以軟體架構角度如果資料流必須跳到另外一個軟體或環境執行，總是覺得不太順遂。因此這30天挑戰的目標將是以Coding方式處理GIS資料，主要是利用Python作為資料分析的語言，當然也會加入一些軟體的輔助。</p><blockquote><p>GIS軟體儘管好用，但若GIS資料是一個資料流的一部分，不允許中斷另以其它軟體做處理，此時，動手寫程式處理GIS資料是必須的，有些時候，撰寫程式會比操作軟體還要方便一些！</p></blockquote><h2 id="目標架構"><a href="#目標架構" class="headerlink" title="目標架構"></a>目標架構</h2><p>在起始階段，原本先構想先規劃一下30天中每一天的目標，但仔細想想，常常寫到一半會發現新多東西或挑戰，很難一次定義清楚每日目標，但整個範疇應該會包含：</p><ul><li>Python 基本GIS資料處理</li><li>資料視覺化</li><li>空間資料庫</li><li>結合各種資料集</li><li>GIS資料採集</li><li>GIS資料分析</li></ul><h2 id="開發環境"><a href="#開發環境" class="headerlink" title="開發環境"></a>開發環境</h2><p>這30天的挑戰會有一些程式碼案例，如果對提供的案例有興趣，歡迎自行測試，測試的環境為Python3，若沒有Python環境建置相關經驗，建議使用Annaconda建置Python3環境，使用Jupyter Notebbook作測試，詳細過程可以參考：<br><a href="https://ithelp.ithome.com.tw/articles/10184561" target="_blank" rel="noopener">[第 01 天] 建立開發環境與計算機應用 - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天</a></p>]]></content>
      
      
      <categories>
          
          <category> data analysis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIS </tag>
            
            <tag> 2019鐵人賽-30天精通GIS資料分析-使用Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽Day 30- 最重要的回顧</title>
      <link href="/2018/01/19/ironman-2018-day30/"/>
      <url>/2018/01/19/ironman-2018-day30/</url>
      
        <content type="html"><![CDATA[<p>第30天了，來回顧一下並發表心得吧！</p><blockquote><p>本文是參加鐵人賽的文章，同步發表於 <a href="https://ithelp.ithome.com.tw/users/20107816/ironman/1541" target="_blank" rel="noopener">“2018鐵人賽-30天打造我的WebGIS系列”</a></p></blockquote><h2 id="30天的發文大綱"><a href="#30天的發文大綱" class="headerlink" title="30天的發文大綱"></a>30天的發文大綱</h2><p>這30天的大綱可以切為6塊，分述如下：<br><a id="more"></a></p><h3 id="第1天到第5天-起步"><a href="#第1天到第5天-起步" class="headerlink" title="第1天到第5天:起步"></a>第1天到第5天:起步</h3><blockquote><p>一開始撰寫這幾篇文章的目標主要在加深WebGIS的觀念，雖然地圖應用在d3.js資料視覺化與Google Maps的發展下，已經讓很多人認識網頁與地圖，但因為過去學的是測量及地理空間資訊，撰寫鐵人賽本意是再把一些資源及觀念整理，所以這幾天從WebGIS元素到互操作性，並透過CartoDB視覺化GIS資料，希望能讓看的人看到WebGIS這個topic。</p></blockquote><p><img src="/images/post/ironman-2018/iron-3001.png" alt=""></p><h3 id="第6天到第10天-動手做資料"><a href="#第6天到第10天-動手做資料" class="headerlink" title="第6天到第10天: 動手做資料"></a>第6天到第10天: 動手做資料</h3><blockquote><p>這幾天的課題是資料的產製，主要是針對POI資料的自製，如果手邊有一份資料要做成POI，要使用什麼格式、要怎麼地址定位、坐標系統跟坐標轉換會是開發者遇到重要的課題，因此，這幾天介紹了一些概念及方便的工具以方便Web開發者參考。</p></blockquote><p><img src="/images/post/ironman-2018/iron-3002.png" alt=""></p><h3 id="第11天到第15天-了解資料型態及使用資源"><a href="#第11天到第15天-了解資料型態及使用資源" class="headerlink" title="第11天到第15天: 了解資料型態及使用資源"></a>第11天到第15天: 了解資料型態及使用資源</h3><blockquote><p>有了自己的資料以後，接下來是該怎麼把資料放到WebGIS，再者，如何運用其他外部資源也是這幾天想整理的，林林總總講了向量資料、網格資料及網路上的WMS資源都有所觸及。</p></blockquote><p><img src="/images/post/ironman-2018/iron-3003.png" alt=""></p><h3 id="第16天到第21天-實作"><a href="#第16天到第21天-實作" class="headerlink" title="第16天到第21天: 實作"></a>第16天到第21天: 實作</h3><blockquote><p>透過Leaflet實作WebGIS，最重要的是掌握GIS資料處理的一些精華，包含了基本展示、比較核心的內插、空間運算函式庫及方法介紹，大致掌握了在前端程式內插、TIN、Voronoi、熱區圖與風場圖等。</p></blockquote><p><img src="/images/post/ironman-2018/iron-3004.png" alt=""><br><img src="/images/post/ironman-2018/iron-3005.png" alt=""></p><h3 id="第22到第27天-擴充"><a href="#第22到第27天-擴充" class="headerlink" title="第22到第27天: 擴充"></a>第22到第27天: 擴充</h3><blockquote><p>已經是後半段了，所以介紹一些對WebGIS中算是外掛元素，包含導航功能、街景、圖表互動等等，另外也非常簡短介紹了空間資料庫，資料庫對WebGIS或GIS來說是另一個非常重要的核心。</p></blockquote><p><img src="/images/post/ironman-2018/iron-3006.png" alt=""></p><h3 id="第28到30天-收尾"><a href="#第28到30天-收尾" class="headerlink" title="第28到30天: 收尾"></a>第28到30天: 收尾</h3><blockquote><p>最後這幾天已經到了收尾階段，帶過一些3D GIS的想法及有趣的WebGIS的案例，最後就是今天的回顧。</p></blockquote><p><img src="/images/post/ironman-2018/iron-3007.png" alt=""></p><h2 id="小結："><a href="#小結：" class="headerlink" title="小結："></a>小結：</h2><p>這30天把一些資訊做了整理，其實都是WebGIS應用會遇到的環節，WebGIS雖然說是Web，在GIS資料面及應用上總是容易入門卻難以深入的，藉由鐵人賽也加強了自己對WebGIS的暸解。</p><h3 id="Good"><a href="#Good" class="headerlink" title="Good"></a>Good</h3><p>這次呈現的主題觸及項目跟當初規劃的差不多，特別是在資料面的問題，在WebGIS案例上多加一些比較GIS的部分，重要的是都有在時間內完成，專案執行的很滿意XD，而這次鐵人賽除了文章上面呈現的，其實更重要的是幕後資料的整理，看了很多開源的專案，也動手特別針對某些議題實作，無論最重有無寫出來，能在短時間內有主題性的去瀏覽或深入這些專案，儘管可能還沒整理好po出來，在開發生涯中也是難得經驗。</p><h3 id="Bad"><a href="#Bad" class="headerlink" title="Bad"></a>Bad</h3><p>有些環節有些可惜，要如何在短時間有限的篇幅濃縮內容，真的很難；而在程式面上，因擔心credit及主題發散問題code是寫在一起沒有架構的XD；另外例如PostGIS資料庫及MongoDB的應用在有限章節中無法實踐太多案例，每日與這些資料庫相處卻有種短時間無法說的簡單並清楚的窘態。</p><h3 id="Acknowledgment"><a href="#Acknowledgment" class="headerlink" title="Acknowledgment"></a>Acknowledgment</h3><p>最後一天必需感謝老婆的支持，晚上不睡覺搞這個真的有點肖，過程中所有幫忙及討論的前團隊同事也謝謝你們。</p><h3 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h3><p>下次見，身為GIS人，也會持續分享GIS的一切並放在github上。<br>也希望可以多跟有興趣的朋友多交流!</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2018鐵人賽-30天打造我的WebGIS系列 </tag>
            
            <tag> web </tag>
            
            <tag> GIS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽Day 29- WebGIS大觀園</title>
      <link href="/2018/01/18/ironman-2018-day29/"/>
      <url>/2018/01/18/ironman-2018-day29/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>到了第29天，想講的東西很多，但能寫的時間不多XD，所以決定在倒數第二天來看一些有趣的WebGIS。<br><a id="more"></a></p><blockquote><p>本文是參加鐵人賽的文章，同步發表於 <a href="https://ithelp.ithome.com.tw/users/20107816/ironman/1541" target="_blank" rel="noopener">“2018鐵人賽-30天打造我的WebGIS系列”</a></p></blockquote><h2 id="Story-Map-The-Bare-Earth"><a href="#Story-Map-The-Bare-Earth" class="headerlink" title="Story Map -The Bare Earth"></a>Story Map -The Bare Earth</h2><p><a href="https://wadnr.maps.arcgis.com/apps/Cascade/index.html?appid=36b4887370d141fcbb35392f996c82d9" target="_blank" rel="noopener">The Bare Earth</a>這個網站利用<a href="http://atlefren.github.io/storymap/" target="_blank" rel="noopener">Story Map</a>的概念，以說故事的方式展示了許多GIS在地質上的應用及名詞解釋，除了資料處理上用了各種GIS內插、視覺化、空間運算等技術外，Web上也使用了大量的swipe雙視窗的功能。<br><img src="/images/post/ironman-2018/iron-2901.png" alt=""></p><h2 id="3D-Bar-Chart-3D-Feinstaub-Berlin"><a href="#3D-Bar-Chart-3D-Feinstaub-Berlin" class="headerlink" title="3D Bar Chart- 3D Feinstaub Berlin"></a>3D Bar Chart- 3D Feinstaub Berlin</h2><p><a href="http://projekte.geo3.eu/feinstaub/#13.54/52.5400/13.4034/52/55" target="_blank" rel="noopener">3D-Feinstaub Berlin</a>網站是在<a href="http://googlemapsmania.blogspot.tw/2018/01/berlin-pollution-mapped.html" target="_blank" rel="noopener">Maps Mania</a>上看到的，以3D視角加上bar chart做視覺展示，所展示的資料是污染物測站的觀測量，並有一個heatmap的開關可供結合，在3D GIS當紅的時代，這種3D GIS視覺化的應用越來越多。<br><img src="/images/post/ironman-2018/iron-2902.png" alt=""></p><h2 id="Indoor-Map"><a href="#Indoor-Map" class="headerlink" title="Indoor Map"></a>Indoor Map</h2><p>室內GIS應該是未來幾年GIS的發展方向，包含OSM Indoor Mapping也越來越多貢獻者，隨著室內定位技術逐漸提升，無論在資料生產維護或是應用開發的部分，會有越來越多室內GIS應用的產品出現，在WebGIS方面應該也會有所變化，這是從esri網站上看到的案例<a href="http://coolmaps.esri.com/IndoorMaps/ParisMall/" target="_blank" rel="noopener">IndoorMaps ParisMall</a>，Leaflet上也有類似的<a href="https://www.cbaines.net/projects/osm/leaflet-indoor/examples/" target="_blank" rel="noopener">發表</a>。<br><img src="/images/post/ironman-2018/iron-2903.png" alt=""></p><h2 id="FlowMap、百度Echarts3與Pixi-js的應用"><a href="#FlowMap、百度Echarts3與Pixi-js的應用" class="headerlink" title="FlowMap、百度Echarts3與Pixi.js的應用"></a>FlowMap、百度Echarts3與Pixi.js的應用</h2><p>WebGIS與人類生活做息息相關的就是交通，也隨著各種交通數據的整合及應用相關視覺化的表現越來越豐富，例如Leaflet上的案例<a href="https://jwasilgeo.github.io/Leaflet.Canvas-Flowmap-Layer/docs/main/" target="_blank" rel="noopener">Flowmap</a>及赫赫有名的<a href="http://wandergis.com/leaflet-echarts3/examples/index.html" target="_blank" rel="noopener">百度Echarts3</a>，另外各種WebGL(e.g. <a href="https://github.com/manubb/Leaflet.PixiOverlay" target="_blank" rel="noopener">Pixi with Leaflet</a>)在地圖上的結合也是越來越常見到。<br><img src="/images/post/ironman-2018/iron-2904.png" alt=""></p><p><img src="/images/post/ironman-2018/iron-2905.png" alt=""></p><p><img src="/images/post/ironman-2018/iron-2906.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2018鐵人賽-30天打造我的WebGIS系列 </tag>
            
            <tag> web </tag>
            
            <tag> GIS </tag>
            
            <tag> Leaflet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽Day 28- WebGL與3D GIS概觀</title>
      <link href="/2018/01/17/ironman-2018-day28/"/>
      <url>/2018/01/17/ironman-2018-day28/</url>
      
        <content type="html"><![CDATA[<h2 id="3D-GIS"><a href="#3D-GIS" class="headerlink" title="3D GIS"></a>3D GIS</h2><p>WebGIS已經逐步走向3D GIS時代，雖然說3D GIS已經發展很多年了，也有Google Earth這樣的產品，不過真的3D GIS在這幾年才比較有大進展，突破原因除了資料獲取的技術提升以外，主要還是跟Web技術息息相關，其中WebGL佔了重要角色。</p><p>3D GIS雖然過去有Google Earth這種霸王級產品，但是其應用有限，而要說這幾年3D GIS發展及前進的速度可說是過去的好幾倍，這與WebGL發展有關，目前3D GIS仍是百家爭鳴階段，連互操作相關議題才剛有幾家大型龍頭爭奪完畢好讓自己的格式成為OGC標準(ESRI I3S勝出)，姑且不論很早起就已ready for use的3D空間分析演算法(與2D差異甚多)，3D GIS在格式、資料方面都與2D截然不同，所以，既然如此，今天就不討論那些，來瀏覽看看一些WebGL for 3D GIS的範例。<br><a id="more"></a></p><blockquote><p>本文是參加鐵人賽的文章，同步發表於 <a href="https://ithelp.ithome.com.tw/users/20107816/ironman/1541" target="_blank" rel="noopener">“2018鐵人賽-30天打造我的WebGIS系列”</a></p></blockquote><h2 id="OSM-Buildong"><a href="#OSM-Buildong" class="headerlink" title="OSM Buildong"></a>OSM Buildong</h2><p><a href="https://osmbuildings.org/?lat=52.51986&amp;lon=13.41535&amp;zoom=16&amp;tilt=30" target="_blank" rel="noopener">OSM building</a>是透過Open Street Map(OSM)上建物的資訊，Render出來的3D地圖展示，主要是根據建築物的footprint與該物件的屬性，包含了樓高、材質、屋頂等等。</p><h2 id="Building-height-Mapbox-GL"><a href="#Building-height-Mapbox-GL" class="headerlink" title="Building height: Mapbox-GL"></a>Building height: Mapbox-GL</h2><p><a href="https://www.mapbox.com/mapbox-gl-js/example/3d-buildings/" target="_blank" rel="noopener">Mapbox-GL</a>也有3D建物的功能，也是利用樓高的方式進行render，看起來效果很好。<br><img src="https://ppt.cc/fmbp9x@.png" alt=""></p><h2 id="地形"><a href="#地形" class="headerlink" title="地形"></a>地形</h2><p>前面兩者的案例是利用平面的街廓線，配合屬性資訊產生3D建物的效果(或是說2.5D)，在3D GIS中，地形也是很重要的元素，例如<a href="http://meetar.github.io/heightmap-demos/scale.html" target="_blank" rel="noopener">heightmap</a>及<a href="http://giscience.github.io/GIScene.js/examples/dem_srtm30" target="_blank" rel="noopener">GIScene.js</a>就是利用SRTM 30米空間解析度全球地形資料庫做的3D地形展示(SRTM全稱是<a href="https://www2.jpl.nasa.gov/srtm/" target="_blank" rel="noopener">Shuttle Radar Topography Mission</a>，是NASA JPL發展多年的計畫)，將SRTM從2D Raster利用WebGL(three.js的)做3D的呈現。<br><img src="https://ppt.cc/fzEAgx@.png" alt=""></p><p><img src="https://ppt.cc/f3L3Jx@.png" alt=""></p><h2 id="3D-mesh場景"><a href="#3D-mesh場景" class="headerlink" title="3D mesh場景"></a>3D mesh場景</h2><p>為了呈現更多細節，目前的3D 的WebGIS以走向3D mesh方向發展，透過電腦視覺及攝影測量技術重建3D場景模型，這些模型是以三角網方式組成，可以呈現非常完整的細節(包含形狀及紋理等)，也因為要呈現細節，所以在瀏覽器效能及API串流的技術上就顯得格外重要，相關案例如<a href="http://www.arcgis.com/home/item.html?id=1f97ba887fd4436c8b17a14d83584611" target="_blank" rel="noopener">ESRI 3D mesh scene layer</a>。<br><img src="https://ppt.cc/fViO9x@.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2018鐵人賽-30天打造我的WebGIS系列 </tag>
            
            <tag> web </tag>
            
            <tag> GIS </tag>
            
            <tag> WebGL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽Day 27- WebGIS 加入D3.js圖表互動</title>
      <link href="/2018/01/16/ironman-2018-day27/"/>
      <url>/2018/01/16/ironman-2018-day27/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天要在WebGIS中加入一些資訊圖表，利用D3.js來實作圖表並與地圖互動，<a href="https://d3js.org/" target="_blank" rel="noopener">D3.js</a>非常具有彈性且多樣，能與地圖結合有錦上添花的感覺，let’s go!<br><a id="more"></a></p><blockquote><p>本文是參加鐵人賽的文章，同步發表於 <a href="https://ithelp.ithome.com.tw/users/20107816/ironman/1541" target="_blank" rel="noopener">“2018鐵人賽-30天打造我的WebGIS系列”</a></p></blockquote><h2 id="D3-js"><a href="#D3-js" class="headerlink" title="D3.js"></a>D3.js</h2><p>D3.js是資料視覺化的利器，光從官方網站範例就琳瑯滿目，例如我們要畫一個bar chart</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">//設定畫布及x,y軸比例尺等</span><br><span class="line"></span><br><span class="line">  var svg = d3.select(&quot;#svg&quot;),</span><br><span class="line">    margin = &#123; top: 20, right: 20, bottom: 30, left: 40 &#125;,</span><br><span class="line">    width = +svg.attr(&quot;width&quot;) - margin.left - margin.right,</span><br><span class="line">    height = +svg.attr(&quot;height&quot;) - margin.top - margin.bottom;</span><br><span class="line">  var x = d3.scaleBand().rangeRound([0, width]).padding(0.1);</span><br><span class="line">  var y = d3.scaleLinear().rangeRound([height, 0]);</span><br><span class="line"></span><br><span class="line">  var column = svg.append(&quot;g&quot;)</span><br><span class="line">    .attr(&quot;transform&quot;, &quot;translate(&quot; + margin.left + &quot;,&quot; + margin.top + &quot;)&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  //設定資料範圍</span><br><span class="line">  x.domain(data.map(function (d) &#123; return d.letter; &#125;));</span><br><span class="line">  y.domain([0, d3.max(data, function (d) &#123; return d.frequency; &#125;)]);</span><br><span class="line"></span><br><span class="line">  //x軸</span><br><span class="line">  column.append(&quot;g&quot;)</span><br><span class="line">    .attr(&quot;transform&quot;, &quot;translate(0,&quot; + height + &quot;)&quot;)</span><br><span class="line">    .call(d3.axisBottom(x));</span><br><span class="line"></span><br><span class="line">  //y軸</span><br><span class="line">  column.append(&quot;g&quot;)</span><br><span class="line">    .call(d3.axisLeft(y))</span><br><span class="line">    .append(&quot;text&quot;)</span><br><span class="line">    .attr(&quot;transform&quot;, &quot;rotate(-90)&quot;)</span><br><span class="line">    .attr(&quot;y&quot;, 6)</span><br><span class="line">    .attr(&quot;dy&quot;, &quot;0.71em&quot;)</span><br><span class="line">    .attr(&quot;text-anchor&quot;, &quot;end&quot;)</span><br><span class="line">    .text(&quot;Frequency&quot;);</span><br><span class="line"></span><br><span class="line">  //bar chart部分</span><br><span class="line">  column.selectAll(&quot;.bar&quot;)</span><br><span class="line">    .data(data)</span><br><span class="line">    .enter().append(&quot;rect&quot;)</span><br><span class="line">    .attr(&quot;class&quot;, &quot;bar&quot;)</span><br><span class="line">    .attr(&quot;x&quot;, function (d) &#123; return x(d.letter); &#125;)</span><br><span class="line">    .attr(&quot;y&quot;, function (d) &#123; return y(d.frequency); &#125;)</span><br><span class="line">    .attr(&quot;width&quot;, x.bandwidth())</span><br><span class="line">    .attr(&quot;height&quot;, function (d) &#123; return height - y(d.frequency); &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在地圖中增加互動"><a href="#在地圖中增加互動" class="headerlink" title="在地圖中增加互動"></a>在地圖中增加互動</h2><p>WebGIS的圖表當然就是圖層的屬性，在讀入geojson後，我們會需要把資料做些轉換，去產生圖表需要的資訊。</p><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$.getJSON(&quot;./dist/assets/data/map.geojson&quot;, function (data) &#123;</span><br><span class="line">  featchdata(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function featchdata(d) &#123;</span><br><span class="line">  //資料</span><br><span class="line"></span><br><span class="line">  var data = [];</span><br><span class="line">  var tmp_type;</span><br><span class="line">  var tmp_count = 0;</span><br><span class="line">  $.each(d.features, function (k, v) &#123;</span><br><span class="line">    if (k == 0) &#123;</span><br><span class="line">      tmp_type = v.properties.surface;</span><br><span class="line">      tmp_count++;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (k == d.length - 1) &#123;</span><br><span class="line">      tmp_count++;</span><br><span class="line">      data.push(&#123; &quot;letter&quot;: tmp_type, &quot;frequency&quot;: tmp_count &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">      if (tmp_type == v.properties.surface) &#123;</span><br><span class="line">        tmp_count++;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        data.push(&#123; &quot;letter&quot;: tmp_type, &quot;frequency&quot;: tmp_count &#125;)</span><br><span class="line">        tmp_count = 1;</span><br><span class="line">        tmp_type = v.properties.surface;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p>上面圖表串接，我們加入一些地圖事件讓圖表動起來，圖表會跟著地圖實際涵蓋的範圍做變化</p><p>首先，加入地圖事件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">map.on(&apos;zoomend&apos;, function () &#123;</span><br><span class="line">  var d = pois.toGeoJSON();</span><br><span class="line">  featchdata(d);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">map.on(&apos;dragend&apos;, function () &#123;</span><br><span class="line">  var d = pois.toGeoJSON();</span><br><span class="line">  featchdata(d);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>接著，在前面的featchdata加入bounds判斷，讓圖表會根據bounds範圍呈現資料<br>使用的函式為turf.booleanPointInPolygon(point,polygon)<br>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">function featchdata(d0) &#123;</span><br><span class="line">var ext = map.getBounds()</span><br><span class="line">  //資料</span><br><span class="line"></span><br><span class="line">  var poly = turf.polygon([[</span><br><span class="line">    [ext.getSouthWest().lng, ext.getSouthWest().lat],</span><br><span class="line">    [ext.getNorthWest().lng, ext.getNorthWest().lat],</span><br><span class="line">    [ext.getNorthEast().lng, ext.getNorthEast().lat],</span><br><span class="line">    [ext.getSouthEast().lng, ext.getSouthEast().lat],</span><br><span class="line">    [ext.getSouthWest().lng, ext.getSouthWest().lat]</span><br><span class="line">  ]]);</span><br><span class="line">  console.log(poly);</span><br><span class="line">  var d = [];</span><br><span class="line"></span><br><span class="line">  $.each(d0.features, function (k, v) &#123;</span><br><span class="line">    var pt = turf.point([v.geometry.coordinates[0], v.geometry.coordinates[1]]);</span><br><span class="line"></span><br><span class="line">    if (turf.booleanPointInPolygon(pt, poly)) &#123;</span><br><span class="line">      d.push(v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">  var data = [];</span><br><span class="line">  var tmp_type;</span><br><span class="line">  var tmp_count = 0;</span><br><span class="line"></span><br><span class="line">  $.each(d, function (k, v) &#123;</span><br><span class="line">    if (k == 0) &#123;</span><br><span class="line">      tmp_type = v.properties.surface;</span><br><span class="line">      tmp_count++;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (k == d.length - 1) &#123;</span><br><span class="line">      tmp_count++;</span><br><span class="line">      data.push(&#123; &quot;letter&quot;: tmp_type, &quot;frequency&quot;: tmp_count &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">      if (tmp_type == v.properties.surface) &#123;</span><br><span class="line">        tmp_count++;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        data.push(&#123; &quot;letter&quot;: tmp_type, &quot;frequency&quot;: tmp_count &#125;)</span><br><span class="line">        tmp_count = 1;</span><br><span class="line">        tmp_type = v.properties.surface;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">  省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>成果略圖</p><p><img src="https://ppt.cc/fOnHix@.png" alt=""></p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>在D3.js我們還加入一些click事件及css調整，可以直接看<a href="https://github.com/chimin17/dotnet-leaflet" target="_blank" rel="noopener">程式碼</a>喔～，另外，除了D3.js以外，也可以使用單純圖表的C3.js或是highchart等較直覺的工具喔。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2018鐵人賽-30天打造我的WebGIS系列 </tag>
            
            <tag> web </tag>
            
            <tag> GIS </tag>
            
            <tag> D3 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽Day 26- 在資料庫中操作空間資料-MongoDB</title>
      <link href="/2018/01/15/ironman-2018-day26/"/>
      <url>/2018/01/15/ironman-2018-day26/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>除了前一天有提到的關聯式資料庫具有地理空間函式庫，使用Key-Value的資料庫例如MongoDB也支援一些空間運算子，在不同應用場合可能會用到，就來嘗試看看。<br><a id="more"></a></p><blockquote><p>本文是參加鐵人賽的文章，同步發表於 <a href="https://ithelp.ithome.com.tw/users/20107816/ironman/1541" target="_blank" rel="noopener">“2018鐵人賽-30天打造我的WebGIS系列”</a></p></blockquote><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>安裝Mongodb的方法：</p><ul><li>Windows可以直接下載安裝檔</li><li>Mac有Howbrew可以使用Howbrew:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br><span class="line">brew install mongodb</span><br></pre></td></tr></table></figure><p>然後就完成了。</p><h2 id="啟動"><a href="#啟動" class="headerlink" title="啟動"></a>啟動</h2><p>啟動Mongodb<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mongod</span><br></pre></td></tr></table></figure></p><p>修改資料庫存放的路徑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath ~/mongo_test</span><br></pre></td></tr></table></figure></p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>進入資料庫操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure></p><p>顯示資料庫清單<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show dbs</span><br><span class="line">//ironman</span><br></pre></td></tr></table></figure></p><p>進入ironman這個資料庫<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use ironman</span><br></pre></td></tr></table></figure></p><p>顯示資料庫的collections<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show collection</span><br><span class="line">//test</span><br></pre></td></tr></table></figure></p><p>在test中query所有資料<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.find(&#123;&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="空間搜尋"><a href="#空間搜尋" class="headerlink" title="空間搜尋"></a>空間搜尋</h2><p>首先匯入一份具有空間資訊的資料：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.save(&#123;name:&quot;前鎮高中網球場&quot;, city:&quot;高雄市&quot;, geom:[120.318735,22.589452]&#125;)</span><br></pre></td></tr></table></figure></p><p>建立空間索引，在2d的索引部分分為2dsphere與2d<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.ensureIndex(&#123;geom:&quot;2dsphere&quot;&#125;)</span><br></pre></td></tr></table></figure></p><p>建立好空間索引，我們就可以使用Mongodb的地理空間函式操作囉！<br>例如使用<a href="https://docs.mongodb.com/manual/reference/operator/query/near/" target="_blank" rel="noopener">\$near</a>進行距離查詢<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.test.find(&#123;geom: &#123;$near:[120.319,22.588] , $maxDistance:1000 &#125;&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p><a href="https://docs.mongodb.com/manual/reference/operator/query-geospatial/" target="_blank" rel="noopener">Mongodb的空間運算子</a>還包含了\$geoIntersects跟$geoWithin等，MongoDB這些基本的空間運算子滿方便的，如果需要使用NoSQL或是Key-Value DB，又需要一些基本的空間資料運算，可以參考！</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2018鐵人賽-30天打造我的WebGIS系列 </tag>
            
            <tag> web </tag>
            
            <tag> GIS </tag>
            
            <tag> Mongodb </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽Day 25- 在資料庫中操作空間資料-PostGIS</title>
      <link href="/2018/01/13/ironman-2018-day25/"/>
      <url>/2018/01/13/ironman-2018-day25/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>PostGIS是PostgreSQL基於OpenGIS中的SFS規範(Simple Feature Specification for SQL)所實作出來的地理物件函式庫，而PostgreSQL則是一個關聯式資料庫的自由軟體(BSD license)，</p><p>跟PostGIS類似的東西相當於MS SQL Server中的SQL Spatial、Oracle spatial、MySQL spatial。</p><p>PostGIS在地理空間運算的實作function非常多，也可以與QGIS等軟體做結合。<br><a id="more"></a></p><blockquote><p>本文是參加鐵人賽的文章，同步發表於 <a href="https://ithelp.ithome.com.tw/users/20107816/ironman/1541" target="_blank" rel="noopener">“2018鐵人賽-30天打造我的WebGIS系列”</a></p></blockquote><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>PostGIS安裝可以參考官網，各種OS有不同的安裝方法，例如Mac使用Homebrew、Windows則有安裝檔等等。<br>也可以在DockerHub找<a href="https://hub.docker.com/r/kartoza/postgis/" target="_blank" rel="noopener">PostGIS的image</a>，用Docker啟用一個PostGIS環境，做一些測試。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>PostGIS基於PostgreSQL當然可以使用psql或是<a href="https://www.pgadmin.org/" target="_blank" rel="noopener">pgadmin</a>等工具及UI<br>tool，另外，QGIS對於PostGIS支援程度很高，有興趣者可以多研究喔！</p><h2 id="建立table"><a href="#建立table" class="headerlink" title="建立table"></a>建立table</h2><p>產生一個table<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tennis (</span><br><span class="line">name VARCHAR(20),</span><br><span class="line">city VARCHAR(10)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>使用<a href="https://postgis.net/docs/AddGeometryColumn.html" target="_blank" rel="noopener">AddGeometryColumn</a>增加空間欄位，指定坐標系統為EPSG:4326 2D。<br><code>SELECT AddGeometryColumn (&#39;topology&#39;,&#39;tennis&#39;,&#39;geom&#39;,4326,&#39;POINT&#39;,2);</code></p><p>使用<a href="http://www.postgis.net/docs/ST_GeomFromText.html" target="_blank" rel="noopener">ST_GeomFromText</a>inset資料資料</p><p>例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO topology.tennis(</span><br><span class="line">name, city, geom)</span><br><span class="line">VALUES (&apos;前鎮高中網球場&apos;, &apos;高雄市&apos;, ST_GeomFromText(&apos;POINT(120.318735 22.589452)&apos;, 4326));</span><br></pre></td></tr></table></figure></p><h2 id="查詢"><a href="#查詢" class="headerlink" title="查詢"></a>查詢</h2><p>PostGIS有很多空間格式的function,KML,geojson,GML等等</p><ul><li>ST_AsGML </li><li>ST_AsGeoJSON </li><li>ST_AsKML </li></ul><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name, city, ST_AsKML(geom)  FROM  topology.tennis</span><br></pre></td></tr></table></figure></p><p>空間查詢會用到的常見方法舉幾個例子：</p><ul><li>ST_Distance - 計算距離</li><li>ST_Intersection - 計算兩個幾何交會的部分</li><li>ST_Intersects: 判斷是否交會</li><li>ST_Length: 計算長度(polyline)</li></ul><p>其實PostGIS的地理空間運算Funtion非常多，<br>涵蓋了raster及vector操作，可以參考官方文件喔！</p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>更多PostGIS可以參考<br><a href="https://www.slideshare.net/mutolisp/postgis-57051746" target="_blank" rel="noopener">https://www.slideshare.net/mutolisp/postgis-57051746</a><br><a href="http://www.postgis.org/docs/" target="_blank" rel="noopener">http://www.postgis.org/docs/</a><br><a href="http://ravenonhill.blogspot.tw/2017/12/postgis.html" target="_blank" rel="noopener">http://ravenonhill.blogspot.tw/2017/12/postgis.html</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2018鐵人賽-30天打造我的WebGIS系列 </tag>
            
            <tag> web </tag>
            
            <tag> GIS </tag>
            
            <tag> PostgreSQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽Day 24- 在WebGIS加入Mapillary街景</title>
      <link href="/2018/01/12/ironman-2018-day24/"/>
      <url>/2018/01/12/ironman-2018-day24/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Mapillary是一個透過眾包建立的街景服務，其目標是建立一個群眾外包的平台分享具空間坐標的照片影片，2013年建立以來，這個平台於2016年11月15日到達一億張相片，除了昨天使用的Google街景以外，我們也可以選擇使用<a href="https://www.mapillary.com/app/?lat=25.05576118895428&amp;lng=121.61677684859569&amp;z=17&amp;focus=map&amp;pKey=MiEVQvYuxJOmTgpS2TNK8w" target="_blank" rel="noopener"><strong>Mapillary的街景</strong></a>，Mapillary計畫透過將其使用者生成的資料授權給其他公司使用來獲利(<a href="https://zh.wikipedia.org/wiki/Mapillary" target="_blank" rel="noopener">wiki</a>)，目前Mapillary的資料已授權OpenStreetMap使用。</p><a id="more"></a><blockquote><p>本文是參加鐵人賽的文章，同步發表於 <a href="https://ithelp.ithome.com.tw/users/20107816/ironman/1541" target="_blank" rel="noopener">“2018鐵人賽-30天打造我的WebGIS系列”</a></p></blockquote><p>Mapillary網站畫面(綠色為有街景的區域)<br><img src="https://ppt.cc/fzt81x@.png" alt=""></p><h2 id="上傳自己的照片"><a href="#上傳自己的照片" class="headerlink" title="上傳自己的照片"></a>上傳自己的照片</h2><p>使用Mapillary，我們可以上傳步行、騎車、開車或是全景的照片或照片，只要註冊帳號都可以上傳，可以透過GPX軌跡或是照片本身的EXIF資訊取得地理坐標。<br><img src="https://ppt.cc/faz6dx@.png" alt=""></p><p>Mapillary除了提供照片上傳，利用眾包發展街景服務以外，還提供了一些電腦覺演算法，進一步為照片加值，辨識道路的物件。<br><img src="https://ppt.cc/f7ifZx@.png" alt=""></p><h2 id="使用Mapillary-js"><a href="#使用Mapillary-js" class="headerlink" title="使用Mapillary.js"></a>使用Mapillary.js</h2><p><a href="https://mapillary.github.io/mapillary-js/" target="_blank" rel="noopener">Mapillary.js</a>使用上跟Google街景沒差很多，我們就只接看範例：<br>首先，要申請帳號並取得<a href="https://www.mapillary.com/app/settings/developers" target="_blank" rel="noopener">token</a></p><p><img src="https://ppt.cc/fi3Wwx@.png" alt=""></p><p>加入div<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;mly&quot; &gt; &lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>加入程式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var mly = new Mapillary.Viewer(</span><br><span class="line">  &apos;mly&apos;,</span><br><span class="line">  &apos;token&apos;,</span><br><span class="line">  &apos;MiEVQvYuxJOmTgpS2TNK8w&apos;// 初始照片的key</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>接著，加入marker<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var mlyMan;</span><br><span class="line">mly.on(Mapillary.Viewer.nodechanged, function (node) &#123;</span><br><span class="line">  var latLon = [node.latLon.lat, node.latLon.lon];</span><br><span class="line"></span><br><span class="line">  if (!mlyMan) &#123;</span><br><span class="line">    mlyMan = L.marker(latLon);</span><br><span class="line">    mlyMan.addTo(map);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    mlyMan.setLatLng(latLon);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  map.setView(latLon);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><img src="https://ppt.cc/fVUJsx@.png" alt=""></p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>Mapillary跟OpenStreetMap一樣透過群眾外包建立地圖(街景)，而且進一步使用自動辨識演算法，讓照片得以加值，有興趣可以上傳喔！</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2018鐵人賽-30天打造我的WebGIS系列 </tag>
            
            <tag> web </tag>
            
            <tag> GIS </tag>
            
            <tag> leaflet </tag>
            
            <tag> Mapillary </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽Day 23- 在WebGIS中加入Google街景</title>
      <link href="/2018/01/11/ironman-2018-day23/"/>
      <url>/2018/01/11/ironman-2018-day23/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天要在地圖中加入另一個元素：街景。<br>到目前為止介紹的WebGIS應用都是2D的，加入街景環景影像雖然不是3D，但還是比較有身歷其境的感覺，今天我們使用的服務為Google街景。</p><a id="more"></a><blockquote><p>本文是參加鐵人賽的文章，同步發表於 <a href="https://ithelp.ithome.com.tw/users/20107816/ironman/1541" target="_blank" rel="noopener">“2018鐵人賽-30天打造我的WebGIS系列”</a></p></blockquote><h2 id="申請token"><a href="#申請token" class="headerlink" title="申請token"></a>申請token</h2><p>跟昨天一樣，使用Google API都要申請token，這邊偷懶地簡單說明一下：<br>街景服務是被放在Google Javascript API之下，<br>首先打開<a href="https://developers.google.com/maps/documentation/javascript/streetview?hl=zh-tw" target="_blank" rel="noopener">連結</a>，按右上角取得金鑰。<br><img src="https://ppt.cc/f1t0Yx@.png" alt=""></p><p>然後選取一個專案(如果沒有要另外開啟)。<br><img src="https://ppt.cc/foKFXx@.png" alt=""></p><p>之後就會取得一組金鑰，這就是token。<br><img src="https://ppt.cc/f5iwnx@.png" alt=""></p><h2 id="加入街景"><a href="#加入街景" class="headerlink" title="加入街景"></a>加入街景</h2><p>收先要引入Google API，記得YOUR_KEY是放你的token喔<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script type=&quot;text/javascript&quot;</span><br><span class="line">  src=&quot;https://maps.googleapis.com/maps/api/js?key=YOUR_KEY&amp;libraries=StreetViewPanorama&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>首先我們沿用昨天的版型，在bottom區塊增加一個id 為googleStreet的div<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&apos;googleStreet&apos;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>接著在app.js加入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var panorama = new google.maps.StreetViewPanorama(</span><br><span class="line">  document.getElementById(&apos;googleStreet&apos;), &#123;</span><br><span class="line">    position: &#123;</span><br><span class="line"></span><br><span class="line">      lat: 25.0574304,</span><br><span class="line">      lng: 121.5964764</span><br><span class="line">    &#125;,</span><br><span class="line">    pov: &#123; heading: 165, pitch: 0 &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p>其中呢，lat及lng為經緯度資訊，pov為相片的水平角及俯仰角。</p><blockquote><ul><li>heading （預設為 0）使用從正北方算起的相對角度來定義相機焦點的旋轉角度。方向是以順時針方向計算（90 度為正東方）。</li><li>pitch （預設為 0）定義從相機的初始預設傾斜「往上」或「往下」的角度變化，通常是（但不總是）平面水平。（例如，在山丘上拍到的影像可能會展示不是水平視角的預設傾斜。）傾斜角度的測量是往上仰視為正值（與預設傾斜呈垂直向上的 +90 度），往下俯視為負值（與預設傾斜呈垂直向下的 -90 度）。</li></ul></blockquote><p>成功囉：</p><p><img src="https://ppt.cc/feER2x@.png" alt=""></p><h2 id="加入地圖互動"><a href="#加入地圖互動" class="headerlink" title="加入地圖互動"></a>加入地圖互動</h2><p>利用Google的方法，初始化街景影像還不夠，別忘記Google環景還有「小人」這個元素。<br>我們來加入類似小人的marker，讓街景跟地圖能互動。<br>要完成這件事需要一些事件綁定，在google.maps.StreetViewPanorama有訂定一些事件：</p><blockquote><ul><li>pano_changed 個別全景變更時引發。</li><li>position_changed 會在全景的底層 (LatLng) 位置變更時引發。旋轉全景將不會觸發此事件。</li><li>pov_changed 會在「街景服務」的 StreetViewPov 變更時引發。</li><li>links_changed 會在「街景服務」的連結變更時引發。</li><li>visible_changed 會在「街景服務」的可見度變更時引發。</li></ul></blockquote><h3 id="移動事件"><a href="#移動事件" class="headerlink" title="移動事件"></a>移動事件</h3><p>移動事件這邊使用position_changed，並且在事件中利用getPosition()取得相片所在坐標，把坐標標示一個marker在地圖上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var panoramMan = L.geoJson(null);</span><br><span class="line">panorama.addListener(&apos;position_changed&apos;, function () &#123;</span><br><span class="line">  map.removeLayer(panoramMan);</span><br><span class="line">  console.log(&quot;x:&quot; + panorama.getPosition().lng());</span><br><span class="line">  console.log(&quot;y:&quot; + panorama.getPosition().lat());</span><br><span class="line">  panoramMan = L.marker([panorama.getPosition().lat(), panorama.getPosition().lng()]).addTo(map);</span><br><span class="line">  map.setView([panorama.getPosition().lat(), panorama.getPosition().lng()], 17)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>加入這個事件以後，只要我們在全景視窗中移動，會有一個marker在圖上。<br>成果：<br><img src="https://ppt.cc/fQGQgx@.png" alt=""></p><h3 id="旋轉事件"><a href="#旋轉事件" class="headerlink" title="旋轉事件"></a>旋轉事件</h3><p>要有旋轉的效果，首先先把marker的symbol改成有方向性的圖片：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var streetIcon = L.icon(&#123;</span><br><span class="line">  iconUrl: &apos;./dist/assets/img/streetman.png&apos;,</span><br><span class="line">  iconSize: [32, 32],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>在加入時設定icon的rotationAngle，值我們可以使用panorama.pov.heading取得轉向。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">panoramMan = L.marker([panorama.getPosition().lat(), panorama.getPosition().lng()],</span><br><span class="line">    &#123; rotationAngle: panorama.pov.heading, icon: streetIcon &#125;).addTo(map);</span><br></pre></td></tr></table></figure></p><p><img src="https://ppt.cc/fPUykx@.png" alt=""><br>完整程式碼：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">var panoramMan = L.geoJson(null);</span><br><span class="line">//圖片</span><br><span class="line">var streetIcon = L.icon(&#123;</span><br><span class="line">  iconUrl: &apos;./dist/assets/img/streetman.png&apos;,</span><br><span class="line">  iconSize: [32, 32],</span><br><span class="line">&#125;);</span><br><span class="line">google街景</span><br><span class="line">var panorama = new google.maps.StreetViewPanorama(</span><br><span class="line">  document.getElementById(&apos;googleStreet&apos;), &#123;</span><br><span class="line">    position: &#123;</span><br><span class="line">      lat: 25.0574304,</span><br><span class="line">      lng: 121.5964764</span><br><span class="line">    &#125;,</span><br><span class="line">    pov: &#123; heading: 165, pitch: 0 &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">//位置變換事件</span><br><span class="line">panorama.addListener(&apos;position_changed&apos;, function () &#123;</span><br><span class="line">  map.removeLayer(panoramMan);</span><br><span class="line">  console.log(&quot;x:&quot; + panorama.getPosition().lng());</span><br><span class="line">  console.log(&quot;y:&quot; + panorama.getPosition().lat());</span><br><span class="line">  console.log(&quot;rotation:&quot; + panorama.pov.heading);</span><br><span class="line">  panoramMan = L.marker([panorama.getPosition().lat(), panorama.getPosition().lng()],</span><br><span class="line">    &#123; rotationAngle: panorama.pov.heading, icon: streetIcon &#125;).addTo(map);</span><br><span class="line">  map.setView([panorama.getPosition().lat(), panorama.getPosition().lng()], 17)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//旋轉事件</span><br><span class="line">panorama.addListener(&apos;pov_changed&apos;, function () &#123;</span><br><span class="line">  map.removeLayer(panoramMan);</span><br><span class="line">  console.log(&quot;x:&quot; + panorama.getPosition().lng());</span><br><span class="line">  console.log(&quot;y:&quot; + panorama.getPosition().lat());</span><br><span class="line">  console.log(&quot;rotation:&quot; + panorama.pov.heading);</span><br><span class="line">  panoramMan = L.marker([panorama.getPosition().lat(), panorama.getPosition().lng()],</span><br><span class="line">    &#123; rotationAngle: panorama.pov.heading, icon: streetIcon &#125;).addTo(map);</span><br><span class="line">  map.setView([panorama.getPosition().lat(), panorama.getPosition().lng()], 17)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>動態成果：<br><img src="https://ppt.cc/fthGCx@.gif" alt=""></p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>把Google街景接進自己的圖台會讓WebGIS功能更完整，使用的方法也很簡單，提供參考囉！<br>今天的程式碼一樣放在<a href="https://github.com/chimin17/dotnet-leaflet" target="_blank" rel="noopener">github</a>(day23的commit)。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2018鐵人賽-30天打造我的WebGIS系列 </tag>
            
            <tag> web </tag>
            
            <tag> GIS </tag>
            
            <tag> leaflet </tag>
            
            <tag> Google </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽Day 22- WebGIS中加入Google Directions導航API</title>
      <link href="/2018/01/10/ironman-2018-day22/"/>
      <url>/2018/01/10/ironman-2018-day22/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天要來接Google路徑導航資訊，Google Maps API有很多很棒的東西可以用在WebGIS，路徑規劃就是其中之一，他的完整名稱是<a href="https://developers.google.com/maps/documentation/directions/intro?hl=zh-tw#Waypoints" target="_blank" rel="noopener">Directions API</a>，把它整合進我們的地圖。</p><a id="more"></a><blockquote><p>本文是參加鐵人賽的文章，同步發表於 <a href="https://ithelp.ithome.com.tw/users/20107816/ironman/1541" target="_blank" rel="noopener">“2018鐵人賽-30天打造我的WebGIS系列”</a></p></blockquote><h2 id="申請token"><a href="#申請token" class="headerlink" title="申請token"></a>申請token</h2><p>使用Google API都要申請token，這邊偷懶地簡單說明一下：<br>首先打開<a href="https://developers.google.com/maps/documentation/directions/intro?hl=zh-tw#Waypoints" target="_blank" rel="noopener">Directions API</a>，按右上角<strong>取得金鑰</strong>。<br><img src="https://ppt.cc/fdq7Nx@.png" alt=""></p><p>然後選取一個專案(如果沒有要另外開啟)。<br><img src="https://ppt.cc/foKFXx@.png" alt=""></p><p>之後就會取得一組金鑰，這就是token。<br><img src="https://ppt.cc/f5iwnx@.png" alt=""></p><p>我們關注一下免費版的使用限制，注意<strong>不是完全免費</strong>的喔。<br><img src="https://ppt.cc/fO6rYx@.png" alt=""></p><ul><li>每日免費要求提供上限為 2,500 個。</li><li>如果啟用計費功能，則每 1,000 個額外要求收費 $0.50 美元，每日提供上限為 100,000 個。</li></ul><h2 id="try-it"><a href="#try-it" class="headerlink" title="try it"></a>try it</h2><p>使用Direction API取得路徑規劃的方式可以用get的方式，<br>最簡單的使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://maps.googleapis.com/maps/api/directions/json?language=zh-TW&amp;origin=&quot; + **start** + &quot;&amp;destination=&quot; + **end** + &quot;&amp;key=&quot; + **token**</span><br></pre></td></tr></table></figure></p><p>request有幾個必填項目，</p><ul><li>key: 金鑰token(如果是在client端使用記得要設定存取domain)</li><li>origin: 起點，起終點都可以使用wgs84坐標或是地標名稱</li><li>destination: 終點</li></ul><p>此外，Direction API有提供很多選填，包含</p><ul><li>language: 語言</li><li>mode: 移動模式(預設為 driving)</li><li>region: 指定地區代碼</li><li>more..<br>Google DirectionAPI可以設定的參數很多，包含避開路線、替代路線等等，有需要者可以詳閱<a href="https://developers.google.com/maps/documentation/directions/intro?hl=zh-tw" target="_blank" rel="noopener">API文件</a></li></ul><p>我們就直接request一個看Direction API回應些什麼..<br><img src="https://ppt.cc/fAdTdx@.png" alt=""></p><p>整個回應的資料十分豐富，包含旅行時間、路徑等等，我們可以把這些資訊使用在圖台上！</p><h2 id="解析資料"><a href="#解析資料" class="headerlink" title="解析資料"></a>解析資料</h2><h3 id="1-overview-polyline"><a href="#1-overview-polyline" class="headerlink" title="1.overview_polyline"></a>1.overview_polyline</h3><p>從回應的資料可以看到<strong>overview_polyline</strong>，這是一個經過編碼的路線陣列，記錄的是API規劃的路徑及沿線polyline的預覽，我們可以把它畫在圖上，而編碼的方法請參閱<a href="https://developers.google.com/maps/documentation/directions/intro?hl=zh-tw#GeocodedWaypoints" target="_blank" rel="noopener">Google文件</a>。<br><img src="https://ppt.cc/fkMB6x@.png" alt=""></p><p>要使用overview_polyline這類的編碼資料，可以引入<a href="https://github.com/jieter/Leaflet.encoded" target="_blank" rel="noopener">Leaflet.encoded</a>，利用這個工具解碼<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var latlngs = L.PolylineUtil.decode(str);</span><br></pre></td></tr></table></figure></p><p>解碼後就是一個polyline的資料，可以直接用polyline放到圖上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L.polyline(latlngs, &#123; color: &apos;red&apos; &#125;).addTo(map);</span><br></pre></td></tr></table></figure></p><h3 id="2-steps"><a href="#2-steps" class="headerlink" title="2.steps"></a>2.steps</h3><p>API回傳的資料很多，其中steps是分段的路徑資訊，我們直接取steps這個陣列來使用，steps裡面包的就是一段一段的轉折點，除了幾何外，還包含了導航文字說明。<br><img src="https://ppt.cc/fkUy9x@.png" alt=""></p><p>展開：<br><img src="https://ppt.cc/fp6Wwx@.png" alt=""></p><p>我們就組個表格，並把文字說明html_instructions塞入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//data為api responds資料</span><br><span class="line">  $.each(data.routes[0].legs[0].steps, function (k, v) &#123;</span><br><span class="line"></span><br><span class="line">    $(&quot;#route-list tbody&quot;).append(&quot;&lt;tr id=&apos;&quot; + v.polyline.points + &quot;&apos; class=&apos;route-row&apos;&gt;&lt;td&gt;&quot; + v.html_instructions + &quot;&lt;/td&gt;&lt;/tr&gt;&quot;);</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>接著，綁定每段的click事件，使用者點到以後就可以顯示每小段的位置，其中在幾何部分我們使用一樣工具解碼喔！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$(document).on(&quot;click&quot;, &quot;.route-row&quot;, function (e) &#123;</span><br><span class="line">  $(&apos;#googleRouting&apos;).animate(&#123; scrollTop: $(this).context.offsetTop &#125;, 800);</span><br><span class="line">  routelineClick($(this).attr(&quot;id&quot;));</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var subRoute = L.geoJson(null);</span><br><span class="line">function routelineClick(str) &#123;</span><br><span class="line">  map.removeLayer(subRoute);</span><br><span class="line">  var latlngs = L.PolylineUtil.decode(str);</span><br><span class="line">  subRoute = L.polyline(latlngs, &#123; color: &apos;red&apos; &#125;).addTo(map);</span><br><span class="line">  map.setView([latlngs[0][0] - 0.001, latlngs[0][1]], 17)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="切版及成果"><a href="#切版及成果" class="headerlink" title="切版及成果"></a>切版及成果</h2><p>為了加入導航的功能，所以今天地圖增加了bottom區塊，有興趣者就自行研究吧，最終的效果如下：<br><img src="https://ppt.cc/furvxx@.gif" alt=""></p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>今天快速測試一下Google Direction，很好用但是不是完全免費的，而類似的服務還有<a href="https://www.mapbox.com/navigation/" target="_blank" rel="noopener">Mapbox</a>、<a href="https://developer.here.com/documentation/routing/topics/overview.html" target="_blank" rel="noopener">Here Routing API</a>，OSM社群也有一些開源的服務，有機會再詳細介紹吧！</p><p>今天的測試程式碼一樣放在<a href="https://github.com/chimin17/dotnet-leaflet" target="_blank" rel="noopener">github</a>(day22的commit)。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2018鐵人賽-30天打造我的WebGIS系列 </tag>
            
            <tag> web </tag>
            
            <tag> GIS </tag>
            
            <tag> leaflet </tag>
            
            <tag> Google </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽Day 21- 在WebGIS加入風場圖</title>
      <link href="/2018/01/09/ironman-2018-day21/"/>
      <url>/2018/01/09/ironman-2018-day21/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前幾天研究了內插、TIN、 Voronoi Diagram、Contours(等高線)、Heatmaps(熱區圖)與Clustering(群聚圖)，這些都是很常見的webGIS資料視覺化應用，今天要來研究的是前陣子很常看到的<a href="https://earth.nullschool.net/" target="_blank" rel="noopener">全球風場圖</a>，看一下到底做了些什麼…</p><a id="more"></a><blockquote><p>本文是參加鐵人賽的文章，同步發表於 <a href="https://ithelp.ithome.com.tw/users/20107816/ironman/1541" target="_blank" rel="noopener">“2018鐵人賽-30天打造我的WebGIS系列”</a></p></blockquote><p>風場圖在不同的地圖、視覺化工具皆有不同的實作：</p><ul><li><a href="https://earth.nullschool.net/" target="_blank" rel="noopener">D3.js</a></li><li><a href="http://esri.github.io/wind-js/" target="_blank" rel="noopener">ESRI</a></li><li><a href="http://danwild.github.io/wind-js-leaflet/" target="_blank" rel="noopener">Leaflet</a></li></ul><h2 id="原始資料與資料來源"><a href="#原始資料與資料來源" class="headerlink" title="原始資料與資料來源"></a>原始資料與資料來源</h2><p>全球風場圖的資料來源主要是<a href="https://www.ncdc.noaa.gov/data-access/model-data#hires_weather_datasets" target="_blank" rel="noopener">美國國家海洋暨大氣總署(NOAA)</a>天氣資料，採用的格式為氣象交換格式<a href="https://en.wikipedia.org/wiki/GRIB" target="_blank" rel="noopener">GRIB2</a>，這個格式是Binary的，在上述三個風場圖實作的套件中，都是採用<a href="https://www.npmjs.com/package/grib2json" target="_blank" rel="noopener">grib2json</a>轉成一包json物件，而這個東西到底記錄了什麼呢？他其實就是網格資料。</p><p>打開grib2json匯出的<a href="https://github.com/chimin17/dotnet-leaflet/blob/master/wwwroot/dist/assets/data/wind-global.json" target="_blank" rel="noopener">json檔案</a>，他大概長這樣：<br><img src="https://ppt.cc/ftPfLx@.png" alt=""></p><p>檔案內除了資料外，還記錄了metadata於header，<br>在data的部分，記錄方式是一條一條橫方向記錄，<br>例如第一點是(25.6,120.5),第二點就是(25.6,120.6)的值，第三點(25.6,120.7)…以此類推…</p><p>header有定義格子的起點與長寬資訊，以一般拿到的NOAA大氣資料(空間解析度為一度)展示出來大概會是這麼密：<br><img src="https://ppt.cc/fvjafx@.png" alt=""></p><h2 id="怎麼畫圖"><a href="#怎麼畫圖" class="headerlink" title="怎麼畫圖"></a>怎麼畫圖</h2><p>前面範例的風場圖是空間解析度為一度的NOAA大氣資料(解析度header會定義)，也就是每一個網格點的氣壓，為產生風向圖的效果，做了幾個處理。</p><p>1.在格子與格子間以<a href="https://en.wikipedia.org/wiki/Bilinear_interpolation" target="_blank" rel="noopener">雙線性內插</a>產生面。(<a href="https://en.wikipedia.org/wiki/Bilinear_interpolation" target="_blank" rel="noopener">wiki</a>)<br><img src="https://ppt.cc/fgoApx@.png" alt=""></p><p>2.內插完成面後，隨機在面之中產生若干粒子，讓粒子沿著速度場、梯度方向移動(由高至低)。<br>3.可以設定一些參數，包含粒子的生命週期，最大最小速度、顏色等等<br>ps.詳情可參考<a href="https://github.com/cambecc/earth" target="_blank" rel="noopener">earth</a>的描述及程式碼^^</p><h2 id="Leaflet實作"><a href="#Leaflet實作" class="headerlink" title="Leaflet實作"></a>Leaflet實作</h2><p>接下來，我們使用<a href="https://github.com/danwild/leaflet-velocity" target="_blank" rel="noopener">leaflet-velocity</a>來繪製全球風場圖，加入我們的地圖專案。</p><p>引入leaflet-velocity.js，並預先下載大氣的網格資料。<br>(使用這個專案必須跟grib2json的輸出格式一樣)</p><p>根據套件說明直接使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$.getJSON(&quot;./dist/assets/data/wind-global.json&quot;, function (data) &#123;</span><br><span class="line">  var velocityLayer = L.velocityLayer(&#123;</span><br><span class="line">  //設置一些顯示的參數</span><br><span class="line">    displayValues: false,</span><br><span class="line">    data: data,</span><br><span class="line">    maxVelocity: 10,</span><br><span class="line">    colorScale: [&apos;#bd0026&apos;, &apos;#f03b20&apos;, &apos;#fd8d3c&apos;, &apos;#fecc5c&apos;, &apos;#ffffb2&apos;]//色階</span><br><span class="line">  &#125;);</span><br><span class="line">  map.addLayer(velocityLayer);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>這個圖層是以Canvas方式實作，以增加效能(不然一堆粒子應該會爆炸…)</p><p>成果：<br><img src="https://ppt.cc/fp3OAx@.gif" alt=""></p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>除了NOAA的大氣資料，如果要產生類似效果的向量圖或梯度圖，也可以自行產製類似的資料繪製在地圖上(洋流等等)。<br>今天的程式碼一樣放在<a href="https://github.com/chimin17/dotnet-leaflet" target="_blank" rel="noopener">github</a>(day21的commit)。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2018鐵人賽-30天打造我的WebGIS系列 </tag>
            
            <tag> web </tag>
            
            <tag> GIS </tag>
            
            <tag> leaflet </tag>
            
            <tag> Google </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽Day 20- WebGIS中的Contours、Heatmaps與Clustering資料呈現</title>
      <link href="/2018/01/08/ironman-2018-day20/"/>
      <url>/2018/01/08/ironman-2018-day20/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天延續昨天內插的議題，準備研究一下webGIS中的Contours(等高線)、Heatmaps(熱區圖)與Clustering(群聚圖)等方法，用來增進原本只是點資料的資訊呈現方式。</p><h2 id="等高線-或等值線"><a href="#等高線-或等值線" class="headerlink" title="等高線(或等值線)"></a>等高線(或等值線)</h2><p>要算<strong>等高線</strong>(contours)或<strong>等值線</strong>我們可以使用turf.js的isobands，要產製一個等值線圖的流程是：1.離散的資料 2.內插(turf.js要使用規則的points) 3.使用isobands。</p><p>所以，延續昨天的IDW內插，我們內插一組gridType為points的資料後，想進一步將等值的範圍做整合，這個過程可以採用computer vision中的<a href="https://en.wikipedia.org/wiki/Marching_squares" target="_blank" rel="noopener">Marching squares</a>。</p><p>這個方法主要需設定的東西是<strong>breaks</strong>，也就是要分值的斷點，例如<a href="在Marching Squares方法中，是以每四格點做pattern判定，所以例如三個色階會有3的4次方=81種情況，詳細可參考[wiki](https://en.wikipedia.org/wiki/Marching_squares">0, 5, 10, 15, 20, 25, 30</a>)。<br><a id="more"></a><br>turf.js計算等值線：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">var contours_pts = turf.interpolate(ramdompts_ipl, 2, &#123; gridType: &apos;points&apos;, property: &apos;obs&apos;, units: &apos;kilometers&apos; &#125;);</span><br><span class="line">//zProperty為要計算的欄位</span><br><span class="line">var contours = turf.isobands(contours_pts, [0, 5, 10, 15, 20, 25, 30], &#123; zProperty: &apos;obs&apos; &#125;);</span><br><span class="line">//結果為multiPolygon喔！！</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//加入圖層</span><br><span class="line">var contoursLayer = L.geoJson(contours, &#123;</span><br><span class="line">  onEachFeature: function (feature, layer) &#123;</span><br><span class="line"></span><br><span class="line">    layer.bindPopup(feature.properties.obs);</span><br><span class="line">  &#125;,</span><br><span class="line">  style: function (feature) &#123;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      &quot;fillColor&quot;: getColor(parseInt(feature.properties.obs.split(&apos;-&apos;)[0])),</span><br><span class="line">      &quot;weight&quot;: 0.5,</span><br><span class="line">      &quot;color&quot;: &apos;#bd0026&apos;,</span><br><span class="line">      &quot;opacity&quot;: 1,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">).addTo(map);</span><br></pre></td></tr></table></figure></p><p>成果：<br><img src="https://ppt.cc/fAc5lx@.png" alt=""></p><h2 id="HeatMaps"><a href="#HeatMaps" class="headerlink" title="HeatMaps"></a>HeatMaps</h2><p>heatMap用來顯示資料<strong>群聚</strong>的現象，是根據<strong>核密度估計</strong>(<a href="https://en.wikipedia.org/wiki/Multivariate_kernel_density_estimation" target="_blank" rel="noopener">kernel density estimation</a>)，演算法實作可以參考<a href="https://www.patrick-wied.at/static/heatmapjs/docs.html" target="_blank" rel="noopener">heatmap.js</a>。</p><p>heatmap在Leaflet直接使用<a href="https://github.com/Leaflet/Leaflet.heat" target="_blank" rel="noopener">Leaflet.heat</a>，heatmap使用時機與內插不同，heatmap是拿來看點資料的聚集現象，以核密度估計為基礎，包含了幾個參數包含每個點資料影響的半徑radius、設定色階的gradient以及用來設定平滑程度的高斯模糊參數blur等等，有興趣可以直接參考<a href="https://www.patrick-wied.at/static/heatmapjs/docs.html" target="_blank" rel="noopener">heatmap.js</a>。</p><p>我們直接使用吧！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//組成資料放進去heatmapLayer</span><br><span class="line">var arr = [];</span><br><span class="line">turf.featureEach(ramdompts_ipl, function (feature) &#123;</span><br><span class="line">  arr.push([feature.geometry.coordinates[1],</span><br><span class="line">  feature.geometry.coordinates[0],</span><br><span class="line">  feature.properties.obs,</span><br><span class="line">  ]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var heatmapLayer = L.heatLayer(arr, &#123;</span><br><span class="line">  radius: 100,</span><br><span class="line">  minOpacity: 0,</span><br><span class="line">  blur: 0.75,</span><br><span class="line">  gradient: &#123; 0.1: &apos;blue&apos;, 0.2: &apos;lime&apos;, 0.3: &apos;red&apos; &#125;</span><br><span class="line">&#125;).addTo(map);</span><br></pre></td></tr></table></figure></p><p>成果：<br><img src="https://ppt.cc/fd7u7x@.png" alt=""><br>從成果這邊可以看到，heatmap主要是從有資料的位置出發，超過影響範圍的地方則沒有值，因此heatmap適合用來表達<strong>影響力範圍</strong>的地理資訊。</p><h2 id="Clustering"><a href="#Clustering" class="headerlink" title="Clustering"></a>Clustering</h2><p>Points Clustering也是資料視覺化常見的手段，感覺起來跟前幾天提到的k-means群聚很像，目的是以若干個群聚中心點代表整體資料，讓資訊傳遞更清楚一些，避免一次大量離散的點資料呈現。</p><p>但是，與k-means不同的是，k-means需要預先說要給幾群，而這邊的Clustering是動態的，處理這個問題解決辦法是貪婪演算法(Greedy algorithms)，請參考<a href="https://blog.mapbox.com/clustering-millions-of-points-on-a-map-with-supercluster-272046ec5c97" target="_blank" rel="noopener">mapbox</a>有完整說明!</p><p>我們引入<a href="https://github.com/Leaflet/Leaflet.markercluster" target="_blank" rel="noopener">Leaflet.markercluster</a>然後直接使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var clusterLayer = L.markerClusterGroup();</span><br><span class="line">clusterLayer.addLayer(ramdomLayer_ipl).addTo(map);</span><br></pre></td></tr></table></figure></p><p>成果：<br><img src="https://ppt.cc/fGlj6x@.png" alt=""></p><p>在Clustering的應用中Cluster是有階層的，不同的比例尺會有不同的聚合成果，類似的應用在<a href="http://gis.hl.gov.tw/restate/map/index.aspx" target="_blank" rel="noopener">房地產系統</a>很常見喔!</p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>今天的程式碼一樣放在<a href="https://github.com/chimin17/dotnet-leaflet" target="_blank" rel="noopener">github</a>(day20的commit)。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2018鐵人賽-30天打造我的WebGIS系列 </tag>
            
            <tag> web </tag>
            
            <tag> GIS </tag>
            
            <tag> leaflet </tag>
            
            <tag> Turf.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽Day 19- 使用Turf.js進行空間資料內插</title>
      <link href="/2018/01/07/ironman-2018-day19/"/>
      <url>/2018/01/07/ironman-2018-day19/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天的主題是空間資料<strong>內插(interpolation)</strong>，內插是GIS很重要的課題，因為我們拿到的資料(例如觀測站資料)很常是point，內插可以幫助我們把這些離散的資料變成<strong>面狀成果</strong>，這樣除了方便資料視覺化，也可以進一步進行空間分析。</p><a id="more"></a><blockquote><p>本文是參加鐵人賽的文章，同步發表於 <a href="https://ithelp.ithome.com.tw/users/20107816/ironman/1541" target="_blank" rel="noopener">“2018鐵人賽-30天打造我的WebGIS系列”</a></p></blockquote><p>內插有很多演算法，我們今天使用turf.js，在client端也可以做即時的內插運算，今天就試著來說明：</p><ul><li>IDW法(規則網格)</li><li>TIN(不規則三角網)</li><li>Voronoi Diagram</li></ul><blockquote><p>在開始之前，先補充說明，GIS內插方法在GIS已相當成熟，GIS軟體如<strong>ArcGIS</strong>、<strong><a href="https://www.youtube.com/watch?v=Q3EgFamxxSk" target="_blank" rel="noopener">QGIS</a></strong>、<strong>GRASS</strong>…等等強大老牌的工具都有更進階的方法(<strong>Bilinear, Kriging, nearest neighbor</strong>)且較多參數可調整的工具可以使用，turf.js是讓我們可以簡單在前端使用^^。</p></blockquote><h2 id="IDW-inverse-distance-weighting"><a href="#IDW-inverse-distance-weighting" class="headerlink" title="IDW(inverse distance weighting)"></a>IDW(inverse distance weighting)</h2><p>IDW法概念很簡單，每個內插點(網格)的值與鄰近樣本點的關係是距離，距離越遠關係越小。<strong>所以取值點與樣本點間的距離為權重進行加權平均，離內插點越近的樣本點賦予的權重越大</strong>。</p><p>已知其坐標和值為Xi，Yi, Zi （i=1,2,3,4,5..）距離加權值求(Xp,Yp)點值，每個則Zp值以下公式。（<a href="http://gisgeography.com/inverse-distance-weighting-idw-interpolation/" target="_blank" rel="noopener">gisgeography</a>）<br><img src="https://ppt.cc/fdBy7x@.png" alt=""></p><p>跟昨天一樣，以randomPoint產生隨機點的點作為示範，並隨機給定一個觀測值<strong>obs</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//產生隨機點</span><br><span class="line">var ramdompts_ipl = turf.randomPoint(25, &#123; bbox: [121.41, 24.34, 121.8, 24.65] &#125;);</span><br><span class="line">turf.featureEach(ramdompts_ipl, function (point) &#123;</span><br><span class="line">  point.properties.obs = Math.random() * 20;</span><br><span class="line">&#125;);</span><br><span class="line">ramdomLayer_ipl.addData(ramdompts_ipl).addTo(map);</span><br><span class="line">map.fitBounds(ramdomLayer_ipl.getBounds());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//放入圖層</span><br><span class="line">var ramdomLayer_ipl = L.geoJson(null, &#123;</span><br><span class="line">  pointToLayer: function (feature, latlng) &#123;</span><br><span class="line">    return L.marker(latlng, &#123;</span><br><span class="line">      icon: L.icon(&#123;</span><br><span class="line">        iconUrl: &quot;./dist/assets/img/icon-black.png&quot;,</span><br><span class="line">        iconSize: [12, 12],</span><br><span class="line">        iconAnchor: [0, 6]</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;).bindPopup(feature.properties.obs.toFixed(3).toString());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>在turf.js中，<a href="http://turfjs.org/docs/#interpolate" target="_blank" rel="noopener">interpolate</a>這個方法就是<strong>IDW</strong>法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var idw_grid = turf.interpolate(ramdompts_ipl, 2, &#123; gridType: &apos;hex&apos;, property: &apos;obs&apos;, units: &apos;kilometers&apos; &#125;);</span><br><span class="line">//成果會是geojson</span><br></pre></td></tr></table></figure></p><p>interpolate有幾個參數，包含內插點的間距(2)、內插得值(obs)、間距的單位(kilometers)、以及gridType(<a href="http://turfjs.org/docs#interpolate" target="_blank" rel="noopener">turfjs</a>)。</p><p>特別說明一下ㄓgridType，目前有’square’ | ‘point’ | ‘hex’ | ‘triangle’ 可以選，例如本範例是用hex，輸出的成果就會是蜂巢狀的<a href="http://turfjs.org/docs/#interpolate" target="_blank" rel="noopener"><strong>hexgrid</strong></a>。<br>除此之外，我們可能會使用square或triangle，因此這個方法是在<strong>規則的形狀</strong>中，計算內插值，<strong>只是格子不一定是方形的</strong>。</p><p>加入圖層，並給定色階：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var idw_gridLayer = L.geoJson(idw_grid, &#123;</span><br><span class="line">  onEachFeature: function (feature, layer) &#123;</span><br><span class="line">    layer.bindPopup(feature.properties.obs.toFixed(3).toString());</span><br><span class="line">  &#125;,</span><br><span class="line">  style: function (feature) &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      &quot;color&quot;: getColor(feature.properties.obs),</span><br><span class="line">      &quot;opacity&quot;: 1,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">).addTo(map);</span><br><span class="line"></span><br><span class="line">//色階</span><br><span class="line">function getColor(x) &#123;</span><br><span class="line">  return x &lt; 5 ? &apos;#bd0026&apos; :</span><br><span class="line">    x &lt; 10 ? &apos;#f03b20&apos; :</span><br><span class="line">      x &lt; 15 ? &apos;#fd8d3c&apos; :</span><br><span class="line">        x &lt; 20 ? &apos;#fecc5c&apos; :</span><br><span class="line">          &apos;#ffffb2&apos;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p> 成果：<br> square<br> <img src="https://ppt.cc/ffUj3x@.png" alt=""><br> hex grid<br> <img src="https://ppt.cc/flFB4x@.png" alt=""></p><h2 id="TIN-Triangulated-Irregular-Network"><a href="#TIN-Triangulated-Irregular-Network" class="headerlink" title="TIN(Triangulated Irregular Network)"></a>TIN(Triangulated Irregular Network)</h2><p>TIN是不規則三角網，在<strong>電腦視覺</strong>領域或是<strong>GIS</strong>都很常見，跟前面IDW法是內插在規則的形狀中有所不同，TIN組成的不規則三角網是將樣本點連成連續的三角網，而在眾多產生三角網的演算法中，<strong>Delaunay三角化</strong>是公認最佳解：</p><blockquote><p>Delaunay三網化：資料中任三點取其外接圓，若此圓內沒有包含任何其它點，則這三角形加入三角網中。這樣的目的是讓三角形都能越接近正三角形，狹長得三角形出現機會越低，因為三角形三邊長若越接近，外接圓越小。<br>(<a href="https://zh.wikipedia.org/wiki/%E5%BE%B7%E5%8B%9E%E5%85%A7%E4%B8%89%E8%A7%92%E5%8C%96" target="_blank" rel="noopener">wiki</a>)<br><img src="https://ppt.cc/fQvLqx@.png" alt=""></p></blockquote><p>在turf中，產生TIN的方法也很簡單：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//把前面的隨機點拿來用用</span><br><span class="line">var tin = turf.tin(ramdompts_ipl, &apos;obs&apos;);</span><br></pre></td></tr></table></figure></p><p>加入圖層：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//放到圖層中</span><br><span class="line">var tinLayer = L.geoJson(tin, &#123;</span><br><span class="line">  onEachFeature: function (feature, layer) &#123;</span><br><span class="line">    var obs = feature.properties.a + feature.properties.b + feature.properties.c;</span><br><span class="line">    feature.properties.obs = obs / 3;</span><br><span class="line">    layer.bindPopup(feature.properties.obs.toFixed(3).toString());</span><br><span class="line">  &#125;,</span><br><span class="line">  style: function (feature) &#123;</span><br><span class="line">    var obs = feature.properties.a + feature.properties.b + feature.properties.c;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      &quot;fillColor&quot;: getColor(obs),</span><br><span class="line">      &quot;weight&quot;: 0.5,</span><br><span class="line">      &quot;color&quot;: &apos;#bd0026&apos;,</span><br><span class="line">      &quot;opacity&quot;: 1,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">).addTo(map);</span><br></pre></td></tr></table></figure></p><p>其中，設定的obs為三角網三頂點要記錄的東西，每個三角形分別會記錄到a,b,c三個頂點，要進行內插，我們就組好TIN之後把三角形內的頂點<strong>取平均</strong>作為三角形的值囉。<br><img src="https://ppt.cc/fpTr0x@.png" alt=""><br>比較一下前面的成果，跟用interpolate把gridType設為triangle<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var idw_grid = turf.interpolate(ramdompts_ipl, 2, </span><br><span class="line">&#123; gridType: &apos;triangle&apos;, property: &apos;obs&apos;, units: &apos;kilometers&apos; &#125;);</span><br></pre></td></tr></table></figure></p><p> <img src="https://ppt.cc/fIMhhx@.png" alt=""><br>感覺TIN省很多圖形～</p><h2 id="Voronoi-Diagram"><a href="#Voronoi-Diagram" class="headerlink" title="Voronoi Diagram"></a>Voronoi Diagram</h2><p>前面TIN講到Delaunay，那就一定要再提到Voronoi Diagram，兩者是對偶關係：</p><blockquote><p>Voronoi Diagram：鄰近的點的中垂線，形成 Voronoi Diagram。(<a href="http://www.csie.ntnu.edu.tw/~u91029/VoronoiDiagram.html" target="_blank" rel="noopener">演算法筆記</a>)</p></blockquote><p>Voronoi Diagram 能表達的是最近或範圍的概念，在地理學上非常適合哪來將點的資料轉成面資料。</p><p>turf.js產生Voronoi Diagram的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var voronoiPolygons = turf.voronoi(ramdompts_ipl,</span><br><span class="line">  &#123; bbox: [121.41, 24.34, 121.8, 24.65] &#125;);</span><br></pre></td></tr></table></figure></p><p>在每個Diagram中塞入值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">turf.featureEach(voronoiPolygons, function (feature, index) &#123;</span><br><span class="line">  feature.properties.obs = ramdompts_ipl.features[index].properties.obs;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>加入圖層：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var voronoiLayer = L.geoJson(voronoiPolygons, &#123;</span><br><span class="line">  onEachFeature: function (feature, layer) &#123;</span><br><span class="line"></span><br><span class="line">    layer.bindPopup(feature.properties.obs.toFixed(3).toString());</span><br><span class="line">  &#125;,</span><br><span class="line">  style: function (feature) &#123;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      &quot;fillColor&quot;: getColor(feature.properties.obs),</span><br><span class="line">      &quot;weight&quot;: 0.5,</span><br><span class="line">      &quot;color&quot;: &apos;#bd0026&apos;,</span><br><span class="line">      &quot;opacity&quot;: 1,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">).addTo(map);</span><br></pre></td></tr></table></figure></p><p>成果：<br>Voronoi Diagram<br><img src="https://ppt.cc/fAEl1x@.png" alt=""><br>套疊TIN與Voronoi Diagram<br><img src="https://ppt.cc/fAGtlx@.png" alt=""></p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>今天介紹了IDW法(規則網格)、TIN(不規則三角網)、Voronoi Diagram，這些方法除了在webGIS會看到，在D3.js等視覺化領域也是很常用到，在turf.js中使用這些方法很簡單，但我自己認為關鍵在於<strong>使用時機</strong>，<strong>要知道每種方法的意義及限制</strong>，才不會誤用或誤解算出來的東西，讓資訊傳達更正確。</p><p>另外，GIS領域有很多其他更多內插方法，例如Bilinear, Kriging, nearest neighbor等等，這些東西目前turf.js還沒看到，但也可以自己找工具或是自己動手實作看看喔。</p><p>今天的程式碼一樣放在<a href="https://github.com/chimin17/dotnet-leaflet" target="_blank" rel="noopener">github</a>(day19的commit)。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2018鐵人賽-30天打造我的WebGIS系列 </tag>
            
            <tag> web </tag>
            
            <tag> GIS </tag>
            
            <tag> leaflet </tag>
            
            <tag> Turf.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽Day 18- Turf.js:空間資料運算及分析</title>
      <link href="/2018/01/06/ironman-2018-day18/"/>
      <url>/2018/01/06/ironman-2018-day18/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天要介紹turf.js，<br>前兩天的<strong>網球地圖</strong>完成了基本的地圖功能及版面，並在地圖上展示、查詢了GIS資料，今天想進一步對資料做<strong>空間資料分析</strong>，使用的是<a href="http://turfjs.org/" target="_blank" rel="noopener">turf.js</a>。<br><img src="https://ppt.cc/fo2KJx@.png" alt=""><br><a id="more"></a></p><blockquote><p>本文是參加鐵人賽的文章，同步發表於 <a href="https://ithelp.ithome.com.tw/users/20107816/ironman/1541" target="_blank" rel="noopener">“2018鐵人賽-30天打造我的WebGIS系列”</a></p></blockquote><p>turf.js是Mapbox公司提出用來處理空間資料分析的開源函式庫，打開turf.js的<a href="http://turfjs.org/" target="_blank" rel="noopener">說明文件</a>，可以看到其功能非常的多：<br><img src="https://ppt.cc/fJyLhx@.png" alt=""></p><p>要處理空間資料的手段有很多，常見的方法是使用QGIS等軟體做資料處理，也可以使用其他程式語言的函式庫輔助或手刻，而turf.js是一個十分方便輕巧的工具，最棒的是可以用在webGIS中，<strong>client端空間資料處理</strong>。</p><p>至於什麼是空間資料分析呢？主要像是空間資料<strong>幾何運算、內插、資料聚合</strong>等都算，廢話不多說，我們就先來實作幾個案例。</p><h2 id="幾何運算-pointsWithinPolygon"><a href="#幾何運算-pointsWithinPolygon" class="headerlink" title="幾何運算-pointsWithinPolygon"></a>幾何運算-pointsWithinPolygon</h2><h3 id="範例目的："><a href="#範例目的：" class="headerlink" title="範例目的："></a>範例目的：</h3><p>產生隨機的POI，利用新北市polygon，切出新北市內的POI</p><h3 id="說明："><a href="#說明：" class="headerlink" title="說明："></a>說明：</h3><p>首先，先new一個layer<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var ramdomLayer = L.geoJson(null, &#123;</span><br><span class="line">  pointToLayer: function (feature, latlng) &#123;</span><br><span class="line">    return L.marker(latlng, &#123;</span><br><span class="line">      icon: L.icon(&#123;</span><br><span class="line">        iconUrl: &quot;./dist/assets/img/icon-black.png&quot;,</span><br><span class="line">        iconSize: [36, 36],</span><br><span class="line">        iconAnchor: [0, 18]</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>利用 turf.randomPoint 產生隨機點，設定隨機點的範圍在[121.41, 24.9, 121.8, 25.19] 方框中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var ramdompts = turf.randomPoint(25, &#123; bbox: [121.41, 24.9, 121.8, 25.19] &#125;);</span><br><span class="line">//把成果放入圖層</span><br><span class="line">ramdomLayer.addData(ramdompts);</span><br><span class="line">ramdomLayer.addTo(map);</span><br></pre></td></tr></table></figure></p><p>接著，放入新北市geojson<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var ntp = L.geoJson(null);</span><br><span class="line">$.getJSON(&quot;./dist/assets/data/ntp.geojson&quot;, function (data) &#123;</span><br><span class="line">  ntp.addData(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>在沒有屬性欄位的狀態下，我們用幾何取出新北市範圍內的POI<br>那就使用turf.pointsWithinPolygon~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//ramdompts為前面產生的隨機點</span><br><span class="line">//data為新北市geojson</span><br><span class="line">var ptsWithin = turf.pointsWithinPolygon(ramdompts, data);</span><br><span class="line">//成果為geojson points</span><br></pre></td></tr></table></figure></p><blockquote><p><strong><em>ps.成果跟後面一起展示喔</em></strong></p></blockquote><h2 id="空間分析-clustersKmeans"><a href="#空間分析-clustersKmeans" class="headerlink" title="空間分析-clustersKmeans"></a>空間分析-clustersKmeans</h2><h3 id="範例目的：-1"><a href="#範例目的：-1" class="headerlink" title="範例目的："></a>範例目的：</h3><p>對新北市範圍的POI做距離分群</p><h3 id="說明：-1"><a href="#說明：-1" class="headerlink" title="說明："></a>說明：</h3><p>這邊使用的群聚(cluster)演算法是Kmeans，Kmeans是非監督式學習的分類演算法，<br>這個演算法要設定分群的數量，流程概述如下：<br>1.根據預先設定的目標群數n，隨機給n個點作為n群資料的群聚中心<br>2.資料中距離(空間距離)哪個群聚中心最近，就屬哪類<br>3.各群以平均值重新計算各群中心點<br>4.反覆1~3，直到中心點移動量低於設定值或是達到迭代次數而停止</p><p>利用turfclustersKmeans為資料作分群，設定分五類：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var clustered_kmeans = turf.clustersKmeans(ptsWithin, &#123; numberOfClusters: 5 &#125;);</span><br><span class="line">//結果是geojson points</span><br></pre></td></tr></table></figure></p><h2 id="幾何運算-找出Polygon的中心點與計算最鄰近的POI"><a href="#幾何運算-找出Polygon的中心點與計算最鄰近的POI" class="headerlink" title="幾何運算-找出Polygon的中心點與計算最鄰近的POI"></a>幾何運算-找出Polygon的中心點與計算最鄰近的POI</h2><h3 id="範例目的：-2"><a href="#範例目的：-2" class="headerlink" title="範例目的："></a>範例目的：</h3><p>找出新北市幾何中心及距離該點最近的poi</p><h3 id="說明：-2"><a href="#說明：-2" class="headerlink" title="說明："></a>說明：</h3><p>turf.js有很多幾何的計算，以下是計算Polygon中心點，及找群POI中距離這個中心點最近的一個，<br>直接看程式碼：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//中心</span><br><span class="line">//data是新北市polygon geojson</span><br><span class="line">var center = turf.center(data);</span><br><span class="line">L.geoJson(center).addTo(map).bindPopup(&apos;這是新北幾何中心&apos;).openPopup();</span><br></pre></td></tr></table></figure></p><p>最短距離：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var nearest = turf.nearestPoint(center, ptsWithin);</span><br><span class="line">L.geoJson(center).addTo(map).bindPopup(&apos;這是距離新北中心最近的點&apos;).openPopup();</span><br></pre></td></tr></table></figure></p><p>成果：<br>隨機給定POI(黑色)，使用空間選取前<br>(ps.，另有不同icon顯示中心點及最近點。)<br><img src="https://ppt.cc/fGzRLx@.png" alt=""><br>只顯示新北市內的poi，並依空間分佈分群(不同顏色為不同群)<br><img src="https://ppt.cc/fQYlDx@.png" alt=""></p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>turf.js除了今天介紹的功能，還有很多是在webGIS常用的，例如<strong>buffer</strong>,<strong>intersect</strong>等等，很多GIS軟體工具提供的功能，turf.js都可以引用參考，非常方便，另外，turf.js相關介紹可以參考這個<a href="https://www.youtube.com/watch?v=gLSEEPHjjPU" target="_blank" rel="noopener">youtube</a>喔^^。</p><p>明天會繼續介紹turf.js比較進階的空間分析功能，除了今天的基本運算外，希望能多觸及進階的分析方法！<br>今天的程式碼一樣放在<a href="https://github.com/chimin17/dotnet-leaflet" target="_blank" rel="noopener">github</a>(day18的commit)。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2018鐵人賽-30天打造我的WebGIS系列 </tag>
            
            <tag> web </tag>
            
            <tag> GIS </tag>
            
            <tag> leaflet </tag>
            
            <tag> Turf.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽Day 17- Leaflet.js：加入資料及資料互動</title>
      <link href="/2018/01/05/ironman-2018-day17/"/>
      <url>/2018/01/05/ironman-2018-day17/</url>
      
        <content type="html"><![CDATA[<p>昨天我們建立了一個初步的地圖，webGIS中，除了基本工具的建立，加入主題性<strong>POI</strong>資料是主要功能，除了加入地圖以外，也必須有瀏覽POI列表及瀏覽詳細資料的操作功能。</p><p>今天就繼續昨天的成果，使用<strong>Leaflet</strong>實作前述事件及資料綁定的工作，資料部分，就以我們團隊成員建立的網球場資料(僅放部分)作為webGIS POI瀏覽範例吧。<br><a id="more"></a></p><blockquote><p>本文是參加鐵人賽的文章，同步發表於 <a href="https://ithelp.ithome.com.tw/users/20107816/ironman/1541" target="_blank" rel="noopener">“2018鐵人賽-30天打造我的WebGIS系列”</a></p></blockquote><h2 id="今日工作"><a href="#今日工作" class="headerlink" title="今日工作"></a>今日工作</h2><ul><li>goejson加入marker</li><li>建立list table</li><li>詳細資料-點擊事件</li><li>版面調整</li></ul><h3 id="加入geojson"><a href="#加入geojson" class="headerlink" title="加入geojson"></a>加入geojson</h3><p>首先new 一個<strong>pois</strong>圖層，在geojson讀進來之後，把資料放進去，並透過<strong>pointToLayer</strong>把marker放上地圖，其中，icon部分根據場地性質(硬地、草地、紅土)給予不同的圖片。</p><p>app.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">//pois圖層</span><br><span class="line">ar pois = L.geoJson(null, &#123;</span><br><span class="line">  pointToLayer: function (feature, latlng) &#123;</span><br><span class="line">  //根據場地性質給不同marker icon</span><br><span class="line">    var icon;</span><br><span class="line">    if (feature.properties.surface == &quot;紅土[clay]&quot;)</span><br><span class="line">      icon = &quot;./dist/assets/img/tennis-red.png&quot;;</span><br><span class="line">    else if (feature.properties.surface == &quot;硬地[hard]&quot;)</span><br><span class="line">      icon = &quot;./dist/assets/img/tennis-blue.png&quot;;</span><br><span class="line">    else if (feature.properties.surface == &quot;草地[grass]&quot;)</span><br><span class="line">      icon = &quot;./dist/assets/img/tennis-green.png&quot;;</span><br><span class="line">    else</span><br><span class="line">      icon = &quot;./dist/assets/img/globe.png&quot;;</span><br><span class="line"></span><br><span class="line">    return L.marker(latlng, &#123;</span><br><span class="line">      icon: L.icon(&#123;</span><br><span class="line">        iconUrl: icon,</span><br><span class="line">        iconSize: [24, 24],</span><br><span class="line">        iconAnchor: [12, 12],</span><br><span class="line">        popupAnchor: [0, -25]</span><br><span class="line">      &#125;),</span><br><span class="line">      title: feature.properties.name,</span><br><span class="line">      riseOnHover: true</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">..略</span><br><span class="line"></span><br><span class="line">讀入</span><br><span class="line">$.getJSON(&quot;./dist/assets/data/map.geojson&quot;, function (data) &#123;</span><br><span class="line">  pois.addData(data);</span><br><span class="line">  map.addLayer(pois);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="建立list-table"><a href="#建立list-table" class="headerlink" title="建立list table"></a>建立list table</h3><p>我們先把list的div設置好，其中<strong>poi-list</strong>是主要的table。<br>index.cshtml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;sidebar&quot;&gt;</span><br><span class="line">   ...略</span><br><span class="line">      </span><br><span class="line">       &lt;div class=&quot;sidebar-table&quot;&gt;</span><br><span class="line">         &lt;table class=&quot;table table-hover&quot; id=&quot;poi-list&quot;&gt;</span><br><span class="line">           &lt;thead class=&quot;hidden&quot;&gt;</span><br><span class="line"></span><br><span class="line">           &lt;/thead&gt;</span><br><span class="line">           &lt;tbody class=&quot;list&quot;&gt;&lt;/tbody&gt;</span><br><span class="line">         &lt;/table&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">    ...略</span><br><span class="line">  </span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>然後，在pois之中加入<strong>onEachFeature</strong>，遍歷每一筆資料並把每一條record組好放入list table中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  onEachFeature: function (feature, layer) &#123;</span><br><span class="line">    if (feature.properties) &#123;</span><br><span class="line">      $(&quot;#poi-list tbody&quot;).append(&apos;&lt;tr class=&quot;feature-row&quot; id=&quot;&apos; + L.stamp(layer) + &apos;&quot; lat=&quot;&apos; + layer.getLatLng().lat + &apos;&quot; lng=&quot;&apos; + layer.getLatLng().lng + &apos;&quot;&gt;&lt;td style=&quot;vertical-align: middle;&quot;&gt;&lt;img width=&quot;16&quot; height=&quot;18&quot; src=&quot;&apos; + layer.options.icon.options.iconUrl + &apos;&quot;&gt;&lt;/td&gt;&lt;td class=&quot;feature-name&quot;&gt;&apos; + layer.feature.properties.name + &apos;&lt;/td&gt;&lt;td style=&quot;vertical-align: middle;&quot;&gt;&lt;i class=&quot;fa fa-chevron-right pull-right&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;/tr&gt;&apos;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="詳細資料-點擊事件"><a href="#詳細資料-點擊事件" class="headerlink" title="詳細資料-點擊事件"></a>詳細資料-點擊事件</h3><p>詳細資料我們這邊採用boostrap的<strong>modal</strong>，先在html加入div。<br>index.cshtml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;modal fade&quot; id=&quot;featureModal&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot;&gt;</span><br><span class="line">   &lt;div class=&quot;modal-dialog&quot;&gt;</span><br><span class="line">     &lt;div class=&quot;modal-content&quot;&gt;</span><br><span class="line">       &lt;div class=&quot;modal-header&quot;&gt;</span><br><span class="line">         &lt;button class=&quot;close&quot; type=&quot;button&quot; data-dismiss=&quot;modal&quot; aria-hidden=&quot;true&quot;&gt;×&lt;/button&gt;</span><br><span class="line">         &lt;h4 class=&quot;modal-title text-primary&quot; id=&quot;feature-title&quot;&gt;&lt;/h4&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">       &lt;div class=&quot;modal-body&quot; id=&quot;feature-info&quot;&gt;&lt;/div&gt;</span><br><span class="line">       &lt;div class=&quot;modal-footer&quot;&gt;</span><br><span class="line">         &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot;  data-dismiss=&quot;modal&quot;&gt;Close&lt;/button&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>接下來，在pois的<strong>onEachFeatured</strong>中把modal之中的內容組好，<br>接著綁定click事件。<br>app.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var content = &quot;&lt;table class=&apos;table table-striped table-bordered table-condensed&apos;&gt;&quot; + &quot;&lt;tr&gt;&lt;th&gt;球場名稱&lt;/th&gt;&lt;td&gt;&quot; + feature.properties.name + &quot;&lt;/td&gt;&lt;/tr&gt;&quot; + &quot;&lt;tr&gt;&lt;th&gt;縣市&lt;/th&gt;&lt;td&gt;&quot; + feature.properties.city + &quot;&lt;/td&gt;&lt;/tr&gt;&quot; + &quot;&lt;tr&gt;&lt;th&gt;材質&lt;/th&gt;&lt;td&gt;&quot; + feature.properties.surface + &quot;&lt;/td&gt;&lt;/tr&gt;&quot; + &quot;&lt;tr&gt;&lt;th&gt;面數&lt;/th&gt;&lt;td&gt;&quot; + layer.feature.properties.number_of_courts + &quot;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; &quot;;</span><br><span class="line">   </span><br><span class="line">   click: function (e) &#123;</span><br><span class="line">         $(&quot;#feature-title&quot;).html(feature.properties.name);</span><br><span class="line">         $(&quot;#feature-info&quot;).html(content);</span><br><span class="line">         $(&quot;#featureModal&quot;).modal(&quot;show&quot;);</span><br></pre></td></tr></table></figure></p><p>在list中也要綁定<strong>click</strong>，讓使用者點擊地圖marker或list的item都可以開啟詳細資料modal，此外，在list之中開啟modal還要順便移動中心點喔。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(document).on(&quot;click&quot;, &quot;.feature-row&quot;, function (e) &#123;</span><br><span class="line">  sidebarClick(parseInt($(this).attr(&quot;id&quot;), 10));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function sidebarClick(id) &#123;</span><br><span class="line">  var layer = pois.getLayer(id);</span><br><span class="line">  map.setView([layer.getLatLng().lat, layer.getLatLng().lng], 17);</span><br><span class="line">  layer.fire(&quot;click&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="版面調整及成果"><a href="#版面調整及成果" class="headerlink" title="版面調整及成果"></a>版面調整及成果</h3><p>版面調整的工事比較瑣碎，主要包含<strong>slidebar</strong>的開關，<strong>nav-bar</strong>的微調(藉由boosrap的RWD特性)，直接看成果，相關內容可以參考程式碼。<br><img src="https://ppt.cc/f3pVix@.png" alt=""><br>手機<br><img src="https://ppt.cc/fmd2Ux@.png" alt=""><br><img src="https://ppt.cc/fTSUhx@.png" alt=""></p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>今天完成基本的資料及事件綁定，其中有一些今天沒做到但常見的部分，例如在table list部分可以增加一些filter功能，可以參考list.js等等，而今天的程式碼都會放在<a href="https://github.com/chimin17/dotnet-leaflet" target="_blank" rel="noopener">github</a>(day17有一個commit)供參考喔。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2018鐵人賽-30天打造我的WebGIS系列 </tag>
            
            <tag> web </tag>
            
            <tag> GIS </tag>
            
            <tag> leaflet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽Day 16- Leaflet.js：設置基本地圖元件</title>
      <link href="/2018/01/04/ironman-2018-day16/"/>
      <url>/2018/01/04/ironman-2018-day16/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天開始要逐步建立一個webGIS，練習一下使用<strong>Leaflet</strong>等API的實戰能力，在開始之前，先設定這個系統的基本功能：</p><ul><li>切換底圖</li><li>定位</li><li>量測</li><li>資料查詢</li><li>街景</li><li>空間查詢</li><li>結合統計圖表</li><li>路徑規劃</li><li>資料視覺化<a id="more"></a><blockquote><p>本文是參加鐵人賽的文章，同步發表於 <a href="https://ithelp.ithome.com.tw/users/20107816/ironman/1541" target="_blank" rel="noopener">“2018鐵人賽-30天打造我的WebGIS系列”</a></p></blockquote></li></ul><h2 id="今日工作"><a href="#今日工作" class="headerlink" title="今日工作"></a>今日工作</h2><p>我們把工作分成幾天說明，今天預計會完成的部分屬於地圖基本款的設置，<br>包含了：</p><ul><li>版型及基本設置</li><li>切換底圖</li><li>定位</li><li>量測</li></ul><p>相關的程式碼都放在<a href="https://github.com/chimin17/dotnet-leaflet" target="_blank" rel="noopener">github</a>，commit原則上會依照文章標示。</p><h3 id="版型及基本設置"><a href="#版型及基本設置" class="headerlink" title="版型及基本設置"></a>版型及基本設置</h3><p>首先，版型很重要，為了方便起見，我們直接套用<strong>boostrap template</strong>，並模仿bootleaf這個專案設計了一套版型。</p><p>大概會是長這樣：<br><img src="https://ppt.cc/fOgvux@.png" alt=""></p><p>上方留一個Navigation Bar做為選單空間，此外，最重要的區塊，就是要有一個map的 div</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;container&quot;&gt;</span><br><span class="line">  &lt;div id=&quot;map&quot;&gt;&lt;/div&gt;</span><br><span class="line">  //預留其他上下左右panel,寬度及高度建議滿版</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><blockquote><p>ps.關於排版詳情請參考原始碼..</p></blockquote><p>接下來，我們在app.js加入：<br><code>map = L.map(&#39;map&#39;).setView([25.0375928, 121.5529563], 10);</code><br>在這邊提醒一下，leaflet預設使用的坐標系統是<strong>EPSG:4326</strong>，但tileLayers的WMTS標準大多是EPSG:3857，忘記或搞混的可以參考<a href="https://ithelp.ithome.com.tw/articles/10194371" target="_blank" rel="noopener">這一篇</a>，另外，第二個值是指zoom layer。</p><h3 id="底圖切換功能"><a href="#底圖切換功能" class="headerlink" title="底圖切換功能"></a>底圖切換功能</h3><p>加入底圖部分，在過去幾天我們也有使用了幾次，基本上是使用tileLayer這個類別，然而，webGIS通常會加入多種底圖，並且要有切換的功能。</p><p>因此，在此我們使用<a href="https://github.com/consbio/Leaflet.Basemaps" target="_blank" rel="noopener">Leaflet.Basemaps</a>套件：</p><blockquote><p>ps.類似的功能也可以自行實作看看，使用<strong>layerGroup</strong></p></blockquote><p>Include the CSS:<br><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;L.Control.Basemaps.css&quot; /&gt;</code><br>Include the JavaScript:<br><code>&lt;script src=&quot;L.Control.Basemaps-min.js&quot;&gt;&lt;/script&gt;</code></p><p>app.js：<strong>這邊用了兩個我覺得滿好看的底圖</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">var basemaps = [</span><br><span class="line">  L.tileLayer(&apos;//&#123;s&#125;.tile.stamen.com/toner-lite/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png&apos;, &#123;</span><br><span class="line">    attribution: &apos;Map tiles by &lt;a href=&quot;http://stamen.com&quot;&gt;Stamen Design&lt;/a&gt;, &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0&quot;&gt;CC BY 3.0&lt;/a&gt; — Map data © &lt;a href=&quot;http://openstreetmap.org&quot;&gt;OpenStreetMap&lt;/a&gt; contributors, &lt;a href=&quot;http://creativecommons.org/licenses/by-sa/2.0/&quot;&gt;CC-BY-SA&lt;/a&gt;&apos;,</span><br><span class="line">    subdomains: &apos;abcd&apos;,</span><br><span class="line">    maxZoom: 20,</span><br><span class="line">    minZoom: 0,</span><br><span class="line">    label: &apos;Toner Lite&apos;  // optional label used for tooltip</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  L.tileLayer(&apos;//&#123;s&#125;.tile.stamen.com/watercolor/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png&apos;, &#123;</span><br><span class="line">    attribution: &apos;Map tiles by &lt;a href=&quot;http://stamen.com&quot;&gt;Stamen Design&lt;/a&gt;, &lt;a href=&quot;http://creativecommons.org/licenses/by/3.0&quot;&gt;CC BY 3.0&lt;/a&gt; — Map data © &lt;a href=&quot;http://openstreetmap.org&quot;&gt;OpenStreetMap&lt;/a&gt; contributors, &lt;a href=&quot;http://creativecommons.org/licenses/by-sa/2.0/&quot;&gt;CC-BY-SA&lt;/a&gt;&apos;,</span><br><span class="line">    subdomains: &apos;abcd&apos;,</span><br><span class="line">    maxZoom: 16,</span><br><span class="line">    minZoom: 1,</span><br><span class="line">    label: &apos;Watercolor&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">map.addControl(L.control.basemaps(&#123;</span><br><span class="line">  basemaps: basemaps,</span><br><span class="line">  tileX: 0,  // tile X coordinate</span><br><span class="line">  tileY: 0,  // tile Y coordinate</span><br><span class="line">  tileZ: 1   // tile zoom level</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p><h3 id="定位功能"><a href="#定位功能" class="headerlink" title="定位功能"></a>定位功能</h3><p>定位功能是webgis基本款，因為光有地圖，很多使用者會不知道自己在哪裡而迷了路，因此類似Google關鍵字地標搜尋，可以輸入關鍵字定位的功能，會是webGIS會出現的東西。</p><p>這類地標搜尋可以使用<strong>Google、Here、Mapbox</strong>，有些是免費(有request限制)以些是付費的，像這些POI供應平台申請access token後即可使用他們的API，在這邊我們使用的也是套件:<a href="https://github.com/perliedman/leaflet-control-geocoder" target="_blank" rel="noopener">Leaflet.geocoder</a>。</p><p>Include the CSS:<br><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;~/dist/assets/css/Control.Geocoder.css&quot; /&gt;</code></p><p> Include the JavaScript:<br><code>&lt;script src=&quot;~/dist/assets/js/Control.Geocoder.js&quot;&gt;&lt;/script&gt;</code></p><p>app.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var geocoder = L.Control.geocoder(&#123;</span><br><span class="line">  defaultMarkGeocode: true</span><br><span class="line">&#125;).addTo(map);</span><br></pre></td></tr></table></figure></p><h3 id="量測功能"><a href="#量測功能" class="headerlink" title="量測功能"></a>量測功能</h3><p>在圖上量測距離及面積，我們一樣直接使用模組，並把套件的文字稍微中文化。<br>Include the CSS:<br><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;~/dist/assets/css/leaflet-measure.css&quot; /&gt;</code></p><p> Include the JavaScript:<br><code>&lt;script src=&quot;~/dist/assets/js/leaflet-measure.js&quot;&gt;&lt;/script&gt;</code></p><p>app.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var measureControl = new L.Control.Measure(&#123; measureControl: true, primaryLengthUnit: &apos;meters&apos;, secondaryLengthUnit: &apos;kilometers&apos; &#125;);</span><br><span class="line">measureControl.addTo(map);</span><br></pre></td></tr></table></figure></p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>今天先將版型設置好及將地圖基本款功能放在地圖上，後續我們還有很多部分要實作，明天繼續加油！</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2018鐵人賽-30天打造我的WebGIS系列 </tag>
            
            <tag> web </tag>
            
            <tag> GIS </tag>
            
            <tag> leaflet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽Day 14- webgis中的網格資料</title>
      <link href="/2018/01/02/ironman-2018-day14/"/>
      <url>/2018/01/02/ironman-2018-day14/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>網格(raster)資料是指以規則網格的方式呈現空間資料，可能是<a href="https://gist.github.com/chimin17/a15dd5a8f4664f8a7377e0d8a33673f5" target="_blank" rel="noopener">長這樣</a>。<br><img src="https://ppt.cc/fJZEyx@.png" alt=""></p><p>上面是試圖以geojson模擬網格資料，網格間隔大概是一英里(1.6km)，並且有一個solRad屬性，像這樣用geojson這種向量格式表達網格看起來沒有什麼問題，但是…</p><p>假設今天網格的間隔<strong>更密一些</strong>，<strong>範圍在大一些</strong>，其資料量可能會很可觀，這時候無論在計算或是前端展示上，GIS傾向會使用影像方式儲存。</p><p>再者，上述案例在網格式資料是<strong>單一波段</strong>的資料(也就是只有solRad這個屬性)，網格資料大多都是<strong>三個波段</strong>的資料(例如正射影像、衛星影像)，相關討論我們在<a href="https://ithelp.ithome.com.tw/articles/10193701" target="_blank" rel="noopener">[Day 6] 常見的GIS資料格式</a>有探討過。</p><p>在webGIS中，我們可能比較少直接處理網格資料，通常都是使用它，今天我們試著使用Leaflet的raster圖層功能。<br><a id="more"></a></p><blockquote><p>本文是參加鐵人賽的文章，同步發表於 <a href="https://ithelp.ithome.com.tw/users/20107816/ironman/1541" target="_blank" rel="noopener">“2018鐵人賽-30天打造我的WebGIS系列”</a></p></blockquote><h2 id="在地圖放影像-使用Leaflet-ImageOverlay"><a href="#在地圖放影像-使用Leaflet-ImageOverlay" class="headerlink" title="在地圖放影像:使用Leaflet-ImageOverlay"></a>在地圖放影像:使用Leaflet-ImageOverlay</h2><p>使用ImageOverlay之前我們先要有資料，這邊我們使用<a href="https://data.gov.tw/dataset/35430" target="_blank" rel="noopener">內政部20米DTM</a>。</p><p>下載下來之後，原始檔案是*.grd，此時必須使用QGIS這套軟體稍作處理，將其轉為.tif或.jpg等。</p><p>原先內政部提供的為TWD97，我們把它轉為WGS84，透過crs設定記錄其範圍坐標（後面要用）。<br><img src="https://ppt.cc/fJEkux@.png" alt=""></p><p>把這張圖片加入地圖，使用imageOverlay，需要使用剛剛記錄的邊界<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var imageUrl = &apos;/dist/DEM.tif&apos;;</span><br><span class="line">var imageBounds = [[24.8737080, 120.9426029], [24.847877, 120.958343]];</span><br><span class="line">var imglayer = L.imageOverlay(imageUrl, imageBounds).addTo(map);</span><br></pre></td></tr></table></figure></p><p>成果：<br><img src="https://ppt.cc/f4WlWx@.png" alt=""></p><p>另外，Leaflet也有VideoOverlay的類別，方法差不多，有需要可以自行參考。</p><h2 id="介接圖磚服務-WMTS-使用Leaflet-TileLayer"><a href="#介接圖磚服務-WMTS-使用Leaflet-TileLayer" class="headerlink" title="介接圖磚服務(WMTS):使用Leaflet-TileLayer"></a>介接圖磚服務(WMTS):使用Leaflet-TileLayer</h2><p>我們在<a href="https://ithelp.ithome.com.tw/articles/10192948" target="_blank" rel="noopener">[Day 3] 談互操作性及Web Map Service 標準</a>有提到WMS與WMTS，兩者在Leaflet中分別方法可以放入我們的地圖，以國土測繪中心的WMTS為例，我們從<a href="https://wmts.nlsc.gov.tw/wmts" target="_blank" rel="noopener">Capabilities</a>的xml檔可以看到介接圖磚的資訊。<br>使用tileLayer實作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L.tileLayer(&apos;https://wmts.nlsc.gov.tw/wmts/EMAP/default/GoogleMapsCompatible/&#123;z&#125;/&#123;y&#125;/&#123;x&#125;&apos;).addTo(map);</span><br></pre></td></tr></table></figure></p><h2 id="圖磚-web-tiles-跟向量圖磚-vector-tiles"><a href="#圖磚-web-tiles-跟向量圖磚-vector-tiles" class="headerlink" title="圖磚(web tiles)跟向量圖磚(vector tiles)"></a>圖磚(web tiles)跟向量圖磚(vector tiles)</h2><p>觀察一下剛剛前面增加的兩個圖層：<br><img src="https://ppt.cc/fDRByx@.png" alt=""><br><img src="https://ppt.cc/fxgSHx@.png" alt=""></p><p>可以觀察到：</p><ul><li>使用imageOverlay，request部分是把整張影像存取下來<br>而使用tileLayer可以發現整個地圖是以細碎的方式存取，這是兩者最大差異。</li><li>對地圖做縮放，imageOverlay並不會重新request資料，tileLayer則會，表示tileLayer是有高度(深度)的。</li></ul><p>以上兩點正好可以拿來說明tileLayer，試想，如果我們一次要存取大範圍的影像，使用imageOverlay應該不太妥當，一來<strong>影像太大</strong>，<strong>二來不能依照深度或高度展示不同細節</strong>。</p><h3 id="圖磚-web-tiles"><a href="#圖磚-web-tiles" class="headerlink" title="圖磚(web tiles)"></a>圖磚(web tiles)</h3><p>TileLayer或是說WMTS的設計概念如下，簡單來講，就是將原始影像<strong>依不同深度切成不同大小的磚</strong>，並透過資料標準的方式協定介接規格，所以client端可以根據不同坐標及深度要求不同的資料，而不是整張影像存取，以增加效率：<br><img src="https://ppt.cc/fPizDx@.png" alt=""><br>(<a href="https://docs.qgis.org/2.14/id/docs/user_manual/working_with_ogc/ogc_client_support.html" target="_blank" rel="noopener">取自QGIS</a>)</p><h2 id="向量圖磚-vector-tiles"><a href="#向量圖磚-vector-tiles" class="headerlink" title="向量圖磚(vector tiles)"></a>向量圖磚(vector tiles)</h2><p>Vector tiles是這幾年webGIS發展的趨勢，它不像wmts是以影像為respond，而是使用geojson，也就是說，過去我們使用的wmts(指通用版電子地圖這類的，不是指正射影像)，是把點線面向量資料網格化成影像製成tiles，而vector tiles是以向量的方式提供給client端。</p><p>使用vector tiles具有這些優勢 (取自<a href="https://www.mapbox.com/vector-tiles/" target="_blank" rel="noopener">mapbox</a>)：</p><ul><li>可自行定義地圖樣式</li><li>vector tile資料小，存取更快</li></ul><p>像是Google map也是採用vector tile的技術，因此可以使用<a href="https://snazzymaps.com/" target="_blank" rel="noopener">snazzy</a>這類工具產生樣式定義檔，並在地圖上使用。</p><p>其他像是<a href="https://carto.com/location-data-services/basemaps/" target="_blank" rel="noopener">cartodb</a>、<a href="https://www.mapbox.com/vector-tiles/" target="_blank" rel="noopener">mapbox</a>，OpenStreetMap的<a href="http://wiki.openstreetmap.org/wiki/Vector_tiles" target="_blank" rel="noopener">ID editor</a>也是利用vector tile技術，而Leaflet也有<a href="http://leafletjs.com/plugins.html#vector-tiles" target="_blank" rel="noopener">相關擴充</a>。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2018鐵人賽-30天打造我的WebGIS系列 </tag>
            
            <tag> web </tag>
            
            <tag> GIS </tag>
            
            <tag> geojson </tag>
            
            <tag> leaflet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽Day 13- webgis中的向量資料:在leaflet實作</title>
      <link href="/2018/01/01/ironman-2018-day13/"/>
      <url>/2018/01/01/ironman-2018-day13/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在<a href="https://ithelp.ithome.com.tw/articles/10192391" target="_blank" rel="noopener">[Day1]webGIS-資訊時代的地理大發現</a>的引言中提到webgis的前端實踐可以透過幾個地圖API，本次鐵人賽將都以<a href="http://leafletjs.com/" target="_blank" rel="noopener">leaflet</a>做說明。<br><a id="more"></a></p><blockquote><p>本文是參加鐵人賽的文章，同步發表於 <a href="https://ithelp.ithome.com.tw/users/20107816/ironman/1541" target="_blank" rel="noopener">“2018鐵人賽-30天打造我的WebGIS系列”</a></p></blockquote><h2 id="Leaflet的向量圖層"><a href="#Leaflet的向量圖層" class="headerlink" title="Leaflet的向量圖層"></a>Leaflet的向量圖層</h2><p>GIS資料中，資料的類型就是網格資料及向量資料，而我們過去也介紹了向量資料的結構(基本上就是點、線、面)。</p><p>在leaflet中，要放向量資料在圖上，可以透過以下物件的實作</p><ul><li>Marker</li><li>Path(以下實作基於此抽象類別)<ul><li>Polyline</li><li>Polygon</li><li>Circle</li><li>CircleMarker</li><li>Rectangle</li></ul></li><li>geojson</li></ul><p>下面就來實作一下這些圖層物件。</p><h3 id="Marker"><a href="#Marker" class="headerlink" title="Marker"></a>Marker</h3><p>相當於geojson中的point。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var marker=L.marker([25.0270000, 121.545745]).addTo(map);</span><br></pre></td></tr></table></figure></p><h3 id="Polylilne"><a href="#Polylilne" class="headerlink" title="Polylilne"></a>Polylilne</h3><p>相當於geojson中的linestring<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var latlngs = [</span><br><span class="line">    [25.0270000, 121.545745],</span><br><span class="line">    [25.0370000, 121.535745],</span><br><span class="line">    [25.0270000, 121.525745]</span><br><span class="line">];</span><br><span class="line">var polyline = L.polyline(latlngs);</span><br><span class="line">polyline.addTo(map);</span><br></pre></td></tr></table></figure></p><h3 id="Polygon"><a href="#Polygon" class="headerlink" title="Polygon"></a>Polygon</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var latlngs = [[</span><br><span class="line">    [25.0270000, 121.555745],</span><br><span class="line">    [25.0370000, 121.565745],</span><br><span class="line">    [25.0270000, 121.575745],</span><br><span class="line">    [25.0270000, 121.555745]</span><br><span class="line">]];</span><br><span class="line">var polygon = L.polygon(latlngs).</span><br><span class="line">polygon.addTo(map);</span><br></pre></td></tr></table></figure><h3 id="rectangle與circle"><a href="#rectangle與circle" class="headerlink" title="rectangle與circle"></a>rectangle與circle</h3><p>rectangle與circle相當於geojson中的polygon跟point的擴充。</p><h4 id="rectangle是長方形，他還是基於polygon"><a href="#rectangle是長方形，他還是基於polygon" class="headerlink" title="rectangle是長方形，他還是基於polygon"></a>rectangle是長方形，他還是基於polygon</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var bounds = [[25.0390000, 121.569745], [25.0380000, 121.568745]];</span><br><span class="line">// create an orange rectangle</span><br><span class="line">L.rectangle(bounds, &#123;color: &quot;#ff7800&quot;, weight: 1&#125;).addTo(map);</span><br></pre></td></tr></table></figure><h4 id="circle是基於point"><a href="#circle是基於point" class="headerlink" title="circle是基於point"></a>circle是基於point</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var circle= L.circle([25.0370000, 121.515745], &#123;radius: 200&#125;);</span><br><span class="line">circle.addTo(map);</span><br><span class="line">console.log(circle.toGeoJSON());</span><br></pre></td></tr></table></figure><h3 id="geojson"><a href="#geojson" class="headerlink" title="geojson"></a>geojson</h3><p>實作也可以直接透過把整份geojson資料，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">var data=&#123;</span><br><span class="line">   &quot;type&quot;: &quot;MultiPolygon&quot;,</span><br><span class="line">   &quot;coordinates&quot;: [</span><br><span class="line">          [</span><br><span class="line">            [</span><br><span class="line">              [</span><br><span class="line">                121.5398,</span><br><span class="line">                25.0071</span><br><span class="line">              ],</span><br><span class="line">              [</span><br><span class="line">                121.5831,</span><br><span class="line">                25.0112</span><br><span class="line">              ],</span><br><span class="line">              [</span><br><span class="line">                121.5515,</span><br><span class="line">                25.0294</span><br><span class="line">              ],</span><br><span class="line">              [</span><br><span class="line">                121.5398,</span><br><span class="line">                25.0071</span><br><span class="line">              ]</span><br><span class="line">            ]</span><br><span class="line">          ],</span><br><span class="line">          [</span><br><span class="line">            [</span><br><span class="line">              [</span><br><span class="line">                121.5398,</span><br><span class="line">                25.0071</span><br><span class="line">              ],</span><br><span class="line">              [</span><br><span class="line">                121.5031,</span><br><span class="line">                25.0112</span><br><span class="line">              ],</span><br><span class="line">              [</span><br><span class="line">                121.5515,</span><br><span class="line">                25.0294</span><br><span class="line">              ],</span><br><span class="line">              [</span><br><span class="line">                121.5398,</span><br><span class="line">                25.0071</span><br><span class="line">              ]</span><br><span class="line">            ]</span><br><span class="line">          ]</span><br><span class="line">      ]</span><br><span class="line">&#125;</span><br><span class="line">var json=L.geoJSON(data).addTo(map);</span><br></pre></td></tr></table></figure></p><h2 id="SVG與Canvas"><a href="#SVG與Canvas" class="headerlink" title="SVG與Canvas"></a>SVG與Canvas</h2><p>Leaflet在Render時可以選擇SVG與Canvas，兩者的選擇跟其他是HTML5應用需考量的問題類似，Canvas適合展現上萬條polyline、上萬點的POI<br>，當資料很大時，如果使用SVG會使效率不佳。</p><p>但是使用Canvas是必須犧牲個別資料間的互動事件(events)。<br>預設的向量資料是採用SVG，這一點可以從執行上面我們的範例<a href="http://jsfiddle.net/d01j5t68/5/" target="_blank" rel="noopener">程式碼</a>後，可以於地圖上按右鍵並開啟瀏覽器開發者模式觀察到：<br><img src="https://ppt.cc/fPv95x@.png" alt=""><br><img src="https://ppt.cc/fSp0cx@.png" alt=""></p><p>指定使用SVG<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var map = L.map(&apos;map&apos;, &#123;</span><br><span class="line">    renderer: L.svg()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>Canvas<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var map = L.map(&apos;map&apos;, &#123;</span><br><span class="line">    renderer: L.canvas()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>使用Canvas後：<br><img src="https://ppt.cc/fjGJCx@.png" alt=""><br><img src="https://ppt.cc/fXkIkx@.png" alt=""></p><h2 id="向量資料object幾個常用的Method與Options"><a href="#向量資料object幾個常用的Method與Options" class="headerlink" title="向量資料object幾個常用的Method與Options"></a>向量資料object幾個常用的Method與Options</h2><p>在webgis中，對於向量資料的操作有一些常用的方法，以下就舉幾個例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//綁定popup於圖層上</span><br><span class="line">polyline.bindPopup(&apos;popup&apos;).</span><br><span class="line">//顯示popup</span><br><span class="line">polyline.openPopup();</span><br><span class="line">//關閉popup</span><br><span class="line">polyline.closePopup();</span><br><span class="line">//為綁定click事件並得到物件的geojson內容</span><br><span class="line">polyline.on(&apos;click&apos;, function(e)&#123;console.log(e.layer.toGeoJSON())&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//移動到某個位置</span><br><span class="line">map.setView([25.0270000, 121.545745], 13);</span><br><span class="line">//移動到polyline範圍</span><br><span class="line">map.fitBounds(polyline.getBounds());</span><br></pre></td></tr></table></figure><p>在實作這些物件時可以設定option，例如繼承於path的polyline、polygon<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var option=&#123;</span><br><span class="line">   color:&apos;#00ff00&apos;,  //顏色</span><br><span class="line">   weight:3,         // 寬度，以pixel為單位</span><br><span class="line">   opacity:0.6,      //透明度</span><br><span class="line">   fill:true,        //是否填滿</span><br><span class="line">   fillColor&apos;red&apos;   //填滿的顏色</span><br><span class="line">&#125;</span><br><span class="line">var polygon = L.polygon(latlngs, option).addTo(map);</span><br></pre></td></tr></table></figure></p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>今天測試的內容都會放在<a href="http://jsfiddle.net/d01j5t68/5/" target="_blank" rel="noopener">jsfiddle</a>，有興趣可以自行測試。<br>祝大家新年快樂^^。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2018鐵人賽-30天打造我的WebGIS系列 </tag>
            
            <tag> web </tag>
            
            <tag> GIS </tag>
            
            <tag> geojson </tag>
            
            <tag> leaflet </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽Day 12- webgis中的向量資料-一些特殊的Polygon</title>
      <link href="/2017/12/31/ironman-2018-day12/"/>
      <url>/2017/12/31/ironman-2018-day12/</url>
      
        <content type="html"><![CDATA[<p>前一天講了向量圖層中的線跟面，今天來看一些特殊的幾何資料，雖然少見但還是遇得到，也藉此機會多認識一下Polygon。<br><a id="more"></a></p><blockquote><p>本文是參加鐵人賽的文章，同步發表於 <a href="https://ithelp.ithome.com.tw/users/20107816/ironman/1541" target="_blank" rel="noopener">“2018鐵人賽-30天打造我的WebGIS系列”</a></p></blockquote><h2 id="Polygon-with-hole-Polygon裡面有洞"><a href="#Polygon-with-hole-Polygon裡面有洞" class="headerlink" title="Polygon with hole(Polygon裡面有洞)"></a>Polygon with hole(Polygon裡面有洞)</h2><p>polygon with hole是polygon內挖個洞，<strong>geojson</strong>處理polygon with hole的方法是在coordinates中加入hole，而且可以加入多個hole。<br>事實上，polygon的coordinates記錄的內容有兩個部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;coordinates&quot;: </span><br><span class="line">[[外圈形狀(outter ring array)], [內圈形狀1(inner ring array)],[內圈形狀2(inner ring array)]]</span><br></pre></td></tr></table></figure></p><p>舉個例子，一個有洞的Polygon資料是長這樣(用json ediotr觀察)：<br><img src="https://ithelp.ithome.com.tw/upload/images/20171230/20107816EWj2ahVeE1.png" alt="https://ithelp.ithome.com.tw/upload/images/20171230/20107816EWj2ahVeE1.png"><br>coordinates這個array包覆的第一個元素是<strong>outter ring</strong>，為polygon的外框，<br>第二個元素後面則擺可以選擇性的放多個<strong>inner ring</strong>，其效果就是在polygon挖洞，並且可以挖很多洞。</p><p>實務上，我們偶爾會遇到這種幾何，例如包圍著臺北市的新北市行政區域範圍(上面就是新北市的geojson)，polygon中的coordinates除了outter ring外，跟昨天的Polygon範例相比，多了一個inner ring，<a href="https://gist.github.com/chimin17/7dc4f37580e41d068800f05637b34ebb" target="_blank" rel="noopener">如有興趣，新北市geojson請點此下載</a>。<br><img src="https://ppt.cc/fpVcux@.png" alt=""><br>(資料取自<a href="https://github.com/ronnywang/twgeojson" target="_blank" rel="noopener">github twgeojson</a>。)</p><h2 id="行政區域界線圖與Multipolygon"><a href="#行政區域界線圖與Multipolygon" class="headerlink" title="行政區域界線圖與Multipolygon"></a>行政區域界線圖與Multipolygon</h2><p>延續台灣的行政區當例子，行政區除了polygon內要被挖洞以外，當然也有行政區是由多個polgon組成，這時候在GIS資料是用multipolygon表示，例如澎湖等具有島嶼或群島性質的縣市，(<a href="https://gist.github.com/chimin17/a2651d9ad07c4ad5430d251c5b313226" target="_blank" rel="noopener">澎湖縣geojson請點此下載</a>)。<br><img src="https://ppt.cc/fAZJUx@.png" alt=""><br>(資料取自<a href="https://github.com/ronnywang/twgeojson" target="_blank" rel="noopener">github twgeojson</a>。)</p><h3 id="飛地"><a href="#飛地" class="headerlink" title="飛地"></a>飛地</h3><p>除了外島因為地理上就是群島的關係，很合理的需要用到multipolygon，但是在本島，也有不少區域會用到multi polygon，這種現象叫做飛地，例如-<a href="https://zh.wikipedia.org/wiki/%E7%91%AA%E5%AE%B6%E9%84%89#%E8%A1%8C%E6%94%BF%E5%8D%80" target="_blank" rel="noopener">屏東縣瑪家鄉(wiki)</a>，除了原本的區域範圍外，因為政府早期鼓勵原住民到平地鄉開墾，因此遷村到原屬於內埔鄉及長治鄉範圍內，形成飛地，需要使用multipolygon表現<a href="https://gist.github.com/chimin17/271f7bc0fdc970e525ac378516518c5a" target="_blank" rel="noopener">(瑪家鄉geojson資料請點此下載)</a>。<br><img src="http://ppt.cc/fmG5Ax@.png" alt=""><br>(資料重製自<a href="http://nominatim.openstreetmap.org" target="_blank" rel="noopener">Open Street Map</a>)</p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>關於飛地的資料，台灣其實有不少村里，由於一些因素造成遷村(政府政策、災害)，借用原本屬於其他行政區的一塊範圍使用，而出現像是瑪家鄉這樣的飛地。</p><p>另外有一件有趣的事，就是發現國土測繪中心opendata的村里界圖資好像怪怪的…，竟然沒有顯示遷村而調整界線，還是沿用沒有遷村的範圍(1967年就遷村了)，可能有特殊理由吧(掌管門牌及行政區界是根據地方自治應該是縣市政府的權責，國土測繪中心這部分只是整合圖資供應的角色)。</p><p>總之就是套上官方的行政區域圖後，竟發現<strong>瑪家國中位置及門牌竟然在瑪家鄉鄉界的外面</strong>…，這個問題我前陣子遇到過一次，還以為是自己程式有bug，弄了半天才發現是這個資料的問題，所以特別拿出來做為參考囉。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2018鐵人賽-30天打造我的WebGIS系列 </tag>
            
            <tag> web </tag>
            
            <tag> GIS </tag>
            
            <tag> geojson </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽Day 11- webgis中的向量圖層-除了點資料以外的幾何</title>
      <link href="/2017/12/30/ironman-2018-day11/"/>
      <url>/2017/12/30/ironman-2018-day11/</url>
      
        <content type="html"><![CDATA[<p>在<a href="https://ithelp.ithome.com.tw/articles/10192976" target="_blank" rel="noopener">Day4</a>、<a href="https://ithelp.ithome.com.tw/articles/10193028" target="_blank" rel="noopener">Day5</a>及<a href="https://ithelp.ithome.com.tw/articles/10193965" target="_blank" rel="noopener">Day8</a>、<a href="https://ithelp.ithome.com.tw/articles/10194193" target="_blank" rel="noopener">Day9</a>談的資料都是點資料，一般使用者最熟悉也最需要的資料也是點，例如各式各樣的POI資料..<br><a id="more"></a></p><blockquote><p>本文是參加鐵人賽的文章，同步發表於 <a href="https://ithelp.ithome.com.tw/users/20107816/ironman/1541" target="_blank" rel="noopener">“2018鐵人賽-30天打造我的WebGIS系列”</a></p></blockquote><p>事實上在二維向量GIS資料中還有其他幾何型態，今天就簡單來看看除了點以外的資料：線跟面。</p><h2 id="工具：geojson-io"><a href="#工具：geojson-io" class="headerlink" title="工具：geojson.io"></a>工具：<a href="http://geojson.io/" target="_blank" rel="noopener">geojson.io</a></h2><p>非常推薦<a href="http://geojson.io/" target="_blank" rel="noopener">geojson.io</a>這個線上工具，可以線上編輯geojson及一些基本格式的匯出匯入，如果手邊沒有工具，很推薦用它來做資料基本處理。(<a href="https://www.youtube.com/watch?v=kr3d6SQvZ6o" target="_blank" rel="noopener">示範影片</a>)</p><p>以下資料都可以貼到geojson.io看看實際情況喔！</p><h2 id="線：LineString-polyline"><a href="#線：LineString-polyline" class="headerlink" title="線：LineString(polyline)"></a>線：LineString(polyline)</h2><p>line是兩個點連成的一條線，polyline就是多個點依序連成的線，polyline常用於表示路線，在geojson中，geometry的type為LineString，coordinates記錄方式為：[[x1,y1],[x1,y2]…[xn,yn]]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;type&quot;: &quot;FeatureCollection&quot;,</span><br><span class="line">  &quot;features&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;type&quot;: &quot;Feature&quot;,</span><br><span class="line">      &quot;properties&quot;: &#123;&#125;,</span><br><span class="line">      &quot;geometry&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;LineString&quot;,</span><br><span class="line">        &quot;coordinates&quot;: [</span><br><span class="line">          [</span><br><span class="line">            121.50518417358397,</span><br><span class="line">            25.028994928869533</span><br><span class="line">          ],</span><br><span class="line">          [</span><br><span class="line">            121.53264999389648,</span><br><span class="line">            25.024173053538334</span><br><span class="line">          ],</span><br><span class="line">          [</span><br><span class="line">            121.54312133789062,</span><br><span class="line">            25.037704933043095</span><br><span class="line">          ]</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="面：polygon"><a href="#面：polygon" class="headerlink" title="面：polygon"></a>面：polygon</h2><p>polygon常用於表示範圍，面狀的資料，一個基本的polygon在coordinates的記錄方式為[[[x1,y1],[x1,y2]…[xn,yn],[x1,y1]]]<br>最後一點要收回第一個節點，形成封閉。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">      &quot;type&quot;: &quot;Feature&quot;,</span><br><span class="line">      &quot;properties&quot;: &#123;&#125;,</span><br><span class="line">      &quot;geometry&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;Polygon&quot;,</span><br><span class="line">        &quot;coordinates&quot;: [</span><br><span class="line">          [</span><br><span class="line">            [</span><br><span class="line">              121.5395164489746,</span><br><span class="line">              25.007995055821286</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">              121.55153274536133,</span><br><span class="line">              25.007995055821286</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">              121.55153274536133,</span><br><span class="line">              25.029461551911478</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">              121.5395164489746,</span><br><span class="line">              25.029461551911478</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">              121.5395164489746,</span><br><span class="line">              25.007995055821286</span><br><span class="line">            ]</span><br><span class="line">          ]</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MultiPoint"><a href="#MultiPoint" class="headerlink" title="MultiPoint"></a>MultiPoint</h2><p>geojson也定義了multipoint，用來表達多個點合併的結果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;type&quot;: &quot;MultiPoint&quot;,</span><br><span class="line">   &quot;coordinates&quot;: [</span><br><span class="line">       [121.5398,25.0071], [121.5515,25.0294]</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="MultiLineString"><a href="#MultiLineString" class="headerlink" title="MultiLineString"></a>MultiLineString</h2><p>一樣也有MultiLineString的定義<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;type&quot;: &quot;MultiLineString&quot;,</span><br><span class="line">   &quot;coordinates&quot;: [</span><br><span class="line">       [   [121.5398,25.0071], [121.5515,25.0294]],</span><br><span class="line">       [   [121.5831,25.0112], [121.5610,25.0224] ]</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="MultiPolygon"><a href="#MultiPolygon" class="headerlink" title="MultiPolygon"></a>MultiPolygon</h2><p>這是MultiPolygon<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;type&quot;: &quot;MultiPolygon&quot;,</span><br><span class="line">   &quot;coordinates&quot;: [</span><br><span class="line">          [</span><br><span class="line">            [</span><br><span class="line">              [</span><br><span class="line">                121.5398,</span><br><span class="line">                25.0071</span><br><span class="line">              ],</span><br><span class="line">              [</span><br><span class="line">                121.5831,</span><br><span class="line">                25.0112</span><br><span class="line">              ],</span><br><span class="line">              [</span><br><span class="line">                121.5515,</span><br><span class="line">                25.0294</span><br><span class="line">              ],</span><br><span class="line">              [</span><br><span class="line">                121.5398,</span><br><span class="line">                25.0071</span><br><span class="line">              ]</span><br><span class="line">            ]</span><br><span class="line">          ],</span><br><span class="line">          [</span><br><span class="line">            [</span><br><span class="line">              [</span><br><span class="line">                121.5398,</span><br><span class="line">                25.0071</span><br><span class="line">              ],</span><br><span class="line">              [</span><br><span class="line">                121.5031,</span><br><span class="line">                25.0112</span><br><span class="line">              ],</span><br><span class="line">              [</span><br><span class="line">                121.5515,</span><br><span class="line">                25.0294</span><br><span class="line">              ],</span><br><span class="line">              [</span><br><span class="line">                121.5398,</span><br><span class="line">                25.0071</span><br><span class="line">              ]</span><br><span class="line">            ]</span><br><span class="line">          ]</span><br><span class="line">      ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>今天先說明了基本的polyline,polygon及其他類似的擴充，跟今天介紹資料時一樣，未來實作時會以geojson為主，而這幾天後續還是會說一些資料的特性，這些幾何資料是webgis的特色，所以，明天繼續囉！</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2018鐵人賽-30天打造我的WebGIS系列 </tag>
            
            <tag> web </tag>
            
            <tag> GIS </tag>
            
            <tag> geojson </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽Day 10-坐標系統及webgis常用的坐標轉換</title>
      <link href="/2017/12/29/ironman-2018-day10/"/>
      <url>/2017/12/29/ironman-2018-day10/</url>
      
        <content type="html"><![CDATA[<p><strong>坐標系統</strong>是GIS、大地測量及製圖的核心，而<strong>坐標轉換</strong>則是開發webGIS最常會遇到的課題。</p><blockquote><p>本文是參加鐵人賽的文章，同步發表於 <a href="https://ithelp.ithome.com.tw/users/20107816/ironman/1541" target="_blank" rel="noopener">“2018鐵人賽-30天打造我的WebGIS系列”</a></p></blockquote><h2 id="坐標系統"><a href="#坐標系統" class="headerlink" title="坐標系統"></a>坐標系統</h2><h3 id="大地坐標系統-地球是近似橢球"><a href="#大地坐標系統-地球是近似橢球" class="headerlink" title="大地坐標系統: 地球是近似橢球"></a>大地坐標系統: 地球是近似橢球</h3><p>由於地球是近似橢球，會有很多模式來描述這個橢球，以及球上面的點位坐標，描述這個橢球及球上位置的系統稱作<strong>大地坐標系統</strong>，需要定義的東西很多，包含幾何面的橢球參數、其他物理面及觀測資料的整合推估，GPS使用的WGS84經緯度屬此類，簡單來說，大地坐標系統是想描述橢球及球上面的位置。</p><h3 id="Map-projection-一切都是投影"><a href="#Map-projection-一切都是投影" class="headerlink" title="Map projection: 一切都是投影"></a>Map projection: 一切都是投影</h3><p>為了製造地圖，人們必須把近似橢球狀的地球投影到平面上，這個坐標系統稱作投影坐標系統，只要是地圖，一定會採用投影系統。<br>投影的方式有很多，麥卡托、藍柏特投影等等…，而從<a href="https://www.jasondavies.com/maps/transition/" target="_blank" rel="noopener">Map Projection Transitions</a>網站的各種投影機制的模擬圖可以看得出來，投影一定會有失真的情況，所以才會常常有以下新聞出現:</p><blockquote><p><a href="https://news.tvbs.com.tw/fun/728573" target="_blank" rel="noopener">400年來世界地圖都失真　各國大小差很多</a><br><a href="https://kknews.cc/zh-tw/news/899oqn.html" target="_blank" rel="noopener">格陵蘭島到底有多大，在地圖上一直是個謎</a><br><a id="more"></a><br>投影系統一定都是有一好沒兩好，<strong>只有最適合的投影，沒有最好的投影</strong>，包含小小的台灣，因考量投影的誤差，也分了121中央子午線及119中央子午線的投影帶。</p></blockquote><h3 id="TWD97"><a href="#TWD97" class="headerlink" title="TWD97"></a>TWD97</h3><p>我們直接來看看訂定及維護我國坐標系統的內政部怎麼說明TWD97(引述自<a href="https://gps.moi.gov.tw/SSCenter/Introduce/IntroducePage.aspx?Page=GPS9" target="_blank" rel="noopener">內政部</a>)</p><ul><li>新國家坐標系統之名稱命名為1997臺灣大地基準（TWD97），其建構係採用國際地球參考框架（International Terrestrial Reference Frame，簡稱為ITRF）。 ITRF為利用全球測站網之觀測資料成果推算所得之地心坐標系統，其方位採國際時間局（Bureau International de l’Heure` Heure，簡稱為BIH）定義在1984.0時刻之方位。</li><li>新國家坐標系統之參考橢球體採用1980年國際大地測量學與地球物理學協會（International Union of Geodesy and Geophysics，簡稱為IUGG）公布之參考橢球體（GRS80），其橢球參數如下：長半徑a=6378137公尺 扁率f=1/298.257222101</li><li>臺灣、琉球嶼、綠島、蘭嶼及龜山島等地區之投影方式採用橫麥卡托投影經差二度分帶，其中央子午線為東經121度，投影原點向西平移250,000公尺，中央子午線尺度比為0.9999；另澎湖、金門及馬祖等地區之投影方式，亦採用橫麥卡托投影經差二度分帶，其中央子午線定於東經119度，投影原點向西平移250,000公尺，中央子午線尺度比為0.9999。</li></ul><p>大致上可以劃兩個重點: (1)有定義所採用的大地系統、 (2)定義了投影，採橫麥卡托二度分帶，且分兩種投影帶(台灣本島121分帶、澎湖金門馬祖119分帶)</p><p>ps.好像也遇過117分帶(太平島、南沙等離島)、123分帶(釣魚台等)</p><h3 id="Web-Mercator"><a href="#Web-Mercator" class="headerlink" title="Web Mercator"></a>Web Mercator</h3><p>我國官方的坐標系統是TWD97，而在webgis中，為了互操作性通用的系統為Web Mercator(或稱Google Web Mercator、Spherical Mercator、WGS 84 Web Mercator)，相關說明可以及其前世今生可以參考<a href="https://read01.com/zh-tw/nBj3.html#.Wjk45lT1XOQ" target="_blank" rel="noopener">這篇文章</a>，它其實不是真正的麥卡托投影，儘管這個坐標系一度不被GIS專業人士接受，但目前已經廣泛使用於webgis。</p><h3 id="EPSG-Geodetic-Parameter-Dataset"><a href="#EPSG-Geodetic-Parameter-Dataset" class="headerlink" title="EPSG Geodetic Parameter Dataset"></a>EPSG Geodetic Parameter Dataset</h3><p>為了方便世界各國的坐標系統的轉換及辨識，一般使用EPSG Wkid來為坐標系統取代號，EPSG是(European Petroleum Survey Group) 的縮寫，EPSG定義了世界各國投影、坐標系統一系列的編號WKID(Well Known ID)，在台灣的我們常使用的編碼如下:</p><ul><li>WMS,WMTS等常使用的Web Mercator :<a href="https://epsg.io/4326" target="_blank" rel="noopener">EPSG:3857</a></li><li>kml, geojson默認使用的WGS84:<a href="https://epsg.io/4326" target="_blank" rel="noopener">EPSG:4326</a></li><li>TWD97 121分帶:<a href="https://epsg.io/3826" target="_blank" rel="noopener">EPSG:3826</a></li><li>TWD97 119分帶:<a href="https://epsg.io/3825" target="_blank" rel="noopener">EPSG:3825</a></li><li>TWD67 121分帶(台灣舊系統):<a href="https://epsg.io/3828" target="_blank" rel="noopener">EPSG:3828</a></li><li>TWD67 119分帶(台灣舊系統):<a href="https://epsg.io/3827" target="_blank" rel="noopener">EPSG:3827</a></li></ul><p>坐標系統在GIS資料中應該都要被記錄，像是shapefile的.prj檔，在解析資料時才能判讀，但在<strong>geojson、kml</strong>通常沒有類似prj的東西，<strong>默認使用EPSG:4326</strong> (也就是WGS84經緯度)</p><h3 id="很常搞混3857-or-4326嗎"><a href="#很常搞混3857-or-4326嗎" class="headerlink" title="很常搞混3857 or 4326嗎?"></a>很常搞混3857 or 4326嗎?</h3><p><a href="https://gis.stackexchange.com/questions/48949/epsg-3857-or-4326-for-googlemaps-openstreetmap-and-leaflet" target="_blank" rel="noopener">stackexchange</a>上有這麼一個問題：</p><blockquote><p>到底在Google Earth、Googlemaps、Openlayers、Leaflet應該是要使用EPSG:3857還是EPSG:4326? </p></blockquote><p>最佳答案是這樣：</p><p>有些事被混淆了…</p><blockquote><ul><li>Google Earth是 EPSG:4326也就是WGS84大地基準</li><li>Googlemaps是使用投影系統的EPSG:3857(其中EPSG:3857大地框架是WGS84，使用麥卡托投影)</li><li>我們使用的底圖圖磚的資料來源是使用EPSG:4326儲存</li><li>但是其發布的Web Service如WMS、WMTS是用EPSG:3857發布的</li></ul></blockquote><p>簡單來說，資料用EPSG:4326存，但地圖底圖Web Service都是使用EPSG:3857(因為地圖是平面，一定是要經過投影的呀！)<br>兩者坐標值域是差很多的：</p><ul><li>EPSG:4326就是熟悉的經緯度</li><li>EPSG:3857台灣地區值域都是八位數(13511000, 2870000)</li></ul><p><strong>通常我們只會使用EPSG:4326的資料但不會直接運算EPSG:3857</strong></p><h2 id="坐標轉換-使用proj4"><a href="#坐標轉換-使用proj4" class="headerlink" title="坐標轉換: 使用proj4"></a>坐標轉換: 使用proj4</h2><p>WMTS跟WMS主要使用EPSG:3857、geojson、kml通常採用EPSG:4326儲存資料，而我們取得的opendata資料常出現EPSG:3826甚至EPSG:3828等坐標系統….實務上一定會遇到這類問題。</p><p>所以我們需要坐標轉換！</p><p>proj4是OSGeo（Open Source Geospatial Foundation）維護的坐標轉換工具，有許多程式語言的版本，Javascirpt可以使用<a href="http://proj4js.org/" target="_blank" rel="noopener">proj4js</a>。</p><p>安裝<br><code>npm install proj4</code>  </p><p>建立test.js<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> var proj4=require(&apos;proj4&apos;);</span><br><span class="line">//首先定義坐標系統的參數(這些內容包含使用大地框架、橢球、投影等)，proj4轉換是根據這些參數</span><br><span class="line"> proj4.defs([</span><br><span class="line">  [</span><br><span class="line">    &apos;EPSG:4326&apos;,</span><br><span class="line">    &apos;+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees&apos;],</span><br><span class="line">  [</span><br><span class="line">    &apos;EPSG:3826&apos;,</span><br><span class="line">    &apos;+title=TWD97 TM2+proj=tmerc +lat_0=0 +lon_0=121 +k=0.9999 +x_0=250000 +y_0=0 +ellps=GRS80 +units=公尺 +no_defs&apos;</span><br><span class="line">  ],</span><br><span class="line">  [</span><br><span class="line">    &apos;EPSG:3828&apos;,</span><br><span class="line">    &apos;+proj=tmerc +lat_0=0 +lon_0=121 +k=0.9999 +x_0=250000 +y_0=0 +ellps=aust_SA&apos;</span><br><span class="line">  ]</span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p><p> 轉換<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var EPSG3826 = new proj4.Proj(&apos;EPSG:3826&apos;);//TWD97 121分帶</span><br><span class="line">var EPSG3828 = new proj4.Proj(&apos;EPSG:3828&apos;);//TWD67 121分帶</span><br><span class="line">var EPSG4326 = new proj4.Proj(&apos;EPSG:4326&apos;);//WGS84</span><br><span class="line"></span><br><span class="line">//4326轉3826 (經緯度轉TWD97)</span><br><span class="line">var data1 = proj4(EPSG4326, EPSG3826, [121, 23]);</span><br><span class="line">//[250000,2544283.12479424]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//3826轉3828(TWD97轉TWD67)</span><br><span class="line">var data2 = proj4(EPSG4326, EPSG3826, data1);</span><br><span class="line">//[249171.10594810007, 2544488.5274230908]</span><br></pre></td></tr></table></figure></p><p>註：Proj4參數取自:<a href="http://mutolisp.logdown.com/posts/207563-taiwan-geodetic-coordinate-system-conversion" target="_blank" rel="noopener">台灣大地座標系統的轉換</a></p><p>執行<br><code>node test.js</code>  </p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>順著上面的案例，<br>我國有兩個時代的坐標系統TWD97跟TWD67<br>兩者在本島121分帶的差值大概是[dx,dy]=[8xx,2xx] (單位：公尺)<br>因此，如果在拿到一份資料時，如果發現X方向差了800公尺而Y方向差了200公尺，又沒有prj檔的狀況下，可能拿到的資料把TWD67跟TWD97弄混了，對坐標需要有一些敏銳度。</p><p>而文中一直提到，在geojson中通常都使用EPSG:4326，但我們取得國內政府平台提供的資料，應該是以適合我國的TWD97測量建置而來。</p><p>另外一個重點，如果在金門、澎湖、馬祖等坐標系統記得使用EPSG:3825(TWD97,119)或EPSG:3827(TWD67,119)喔，綜上所述，proj4在webgis一定會需要用到。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2018鐵人賽-30天打造我的WebGIS系列 </tag>
            
            <tag> web </tag>
            
            <tag> GIS </tag>
            
            <tag> proj4 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽Day 9-自己產製資料-地址定位part2</title>
      <link href="/2017/12/28/ironman-2018-day9/"/>
      <url>/2017/12/28/ironman-2018-day9/</url>
      
        <content type="html"><![CDATA[<p>今天要介紹TGOS全國門牌定位服務。</p><blockquote><p>本文是參加鐵人賽的文章，同步發表於 <a href="https://ithelp.ithome.com.tw/users/20107816/ironman/1541" target="_blank" rel="noopener">“2018鐵人賽-30天打造我的WebGIS系列”</a></p></blockquote><h2 id="TGOS-Taiwan-Geospatial-One-Stop"><a href="#TGOS-Taiwan-Geospatial-One-Stop" class="headerlink" title="TGOS (Taiwan Geospatial One Stop)"></a>TGOS (Taiwan Geospatial One Stop)</h2><p>TGOS是內政部資訊中心維運的系統，整合了很多國內GIS資料，也提供了很多GIS相關API，除了需要申請token的API外，也有民眾版的查詢系統可供線上使用。<br><img src="https://ithelp.ithome.com.tw/upload/images/20171227/20107816kyqSsyu3bD.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20171227/20107816kyqSsyu3bD.jpg"></p><h3 id="TGOS全國門牌定位服務"><a href="#TGOS全國門牌定位服務" class="headerlink" title="TGOS全國門牌定位服務"></a>TGOS全國門牌定位服務</h3><p><strong><a href="https://www.tgos.tw/TGOS/Web/Address/TGOS_Address.aspx" target="_blank" rel="noopener">全國門牌定位API服務</a></strong> 整合了國內戶政機關的門牌坐標資料，更新頻率很高，因為各縣市門牌資料在建置時驗收的標準滿高的，所以完整性跟正確性都很高。<br><a id="more"></a></p><p>更重要的是該API的模糊查詢的機制滿實用的:<br><img src="https://ithelp.ithome.com.tw/upload/images/20171227/20107816swpNRoftBV.png" alt="https://ithelp.ithome.com.tw/upload/images/20171227/20107816swpNRoftBV.png"></p><blockquote><p>假設今天輸入 <strong>[忠孝東路十段380號]</strong> ，這是一個不存在的門牌</p><ul><li>在Google Geocode可能傳給忠孝東路十段38號(常理上，380號跟38號可能差距天南地北)</li><li>TGOS可能傳給忠孝東路十段370號，這是一個在空間上比較有關聯的結果</li></ul><p>另外也可以選擇單雙號的鎖定(台灣門牌編制，單號通常在一側，雙號在另一側)，實際例子可能要請各位實際去操作看看</p></blockquote><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>以下直接實際操作看看</p><ol><li>開啟服務網址，輸入門牌<br><img src="https://ithelp.ithome.com.tw/upload/images/20171227/20107816Ov1zv5zLdZ.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20171227/20107816Ov1zv5zLdZ.jpg"></li></ol><p>2.系統會跳出一個地圖，並顯示坐標<br><img src="https://ithelp.ithome.com.tw/upload/images/20171227/20107816oG1QJseHlL.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20171227/20107816oG1QJseHlL.jpg"></p><p><strong>[關於坐標值]</strong></p><blockquote><p>TGOS單筆查詢的坐標值是X是6位數,Y是7位數，跟先前幾天看到的121.XX,24.XX經緯度不一樣<br>這邊顯示的坐標系統是採用國內的TWD97，坐標系統這件事跟製圖有關，世界各國各區都會定義適合自己的局部坐標系統，關於坐標系統，後續打算攻略一番，就靜待下回分曉瞜。</p></blockquote><h3 id="批次操作"><a href="#批次操作" class="headerlink" title="批次操作"></a>批次操作</h3><p>TGOS門牌API是可以批次使用的(其實批次才是重點)，但是需要申請(網站上有提供教學)，申請後就可以使用啦，目前申請取得token後，好像一天可以使用1萬次。<br><img src="https://ithelp.ithome.com.tw/upload/images/20171227/20107816erY99zLo31.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20171227/20107816erY99zLo31.jpg"></p><p>批次操作的選擇項目比較多，像是可以選輸出的坐標系統。<br><img src="https://ithelp.ithome.com.tw/upload/images/20171227/201078161pM3S7dvHi.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20171227/201078161pM3S7dvHi.jpg"></p><h3 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h3><h4 id="什麼-坐標系統"><a href="#什麼-坐標系統" class="headerlink" title="什麼? 坐標系統 ?"></a>什麼? 坐標系統 ?</h4><p>這邊我們看到個資料坐標系統是<code>TWD97(EPSG:3826)</code>，而之前的提到的資料都是<code>WGS84(EPSG:4326)</code>，關於這些坐標的內容及轉換..，就明天見囉!</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2018鐵人賽-30天打造我的WebGIS系列 </tag>
            
            <tag> web </tag>
            
            <tag> GIS </tag>
            
            <tag> opendata </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽Day 8-自己產製資料-地址定位part1</title>
      <link href="/2017/12/27/ironman-2018-day8/"/>
      <url>/2017/12/27/ironman-2018-day8/</url>
      
        <content type="html"><![CDATA[<p>取得GIS資料的方式有很多，包含：</p><ul><li>取得實體檔或API(opendata等資料交換平台)</li><li>拿專業儀器測量或在地圖上數化而得：GPS、遙測、工程測量、etc.</li><li>地址定位：僅有poi的地址，可從線上資源取得地址的坐標</li></ul><p>今天要介紹的為<strong>地址定位</strong>，如果你也有一批資料有地址沒坐標，那就參考本篇吧^^。<br><a id="more"></a></p><blockquote><p>本文是參加鐵人賽的文章，同步發表於 <a href="https://ithelp.ithome.com.tw/users/20107816/ironman/1541" target="_blank" rel="noopener">“2018鐵人賽-30天打造我的WebGIS系列”</a></p></blockquote><p>以 <strong><a href="http://data.taipei/opendata/datalist/datasetMeta?oid=900f910f-a63c-46a0-a0c6-c2c1e55eef99" target="_blank" rel="noopener">臺北市各區農會地址一覽表</a></strong> 臺北市開放資料平臺下載的這份為例，就是具有<strong>地址</strong>，但沒有<strong>坐標</strong> 的資料。<br><img src="https://ithelp.ithome.com.tw/upload/images/20171227/20107816DaK7lkTNPs.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20171227/20107816DaK7lkTNPs.jpg"></p><p>我們可以使用一些線上資源幫助我們把它加值為具空間資訊的GIS資料，包括:</p><ul><li>Google Fusion Table</li><li>內政部TGOS門牌對位系統</li><li>其它 (例如CartoDB也有支援Here的Geocoding，但需酌收點數)</li></ul><p>我們這兩天就來使用看看免費又好用的<strong>Google Fusion Table</strong>及<strong>內政部TGOS門牌對位系統</strong>，自己動手產生GIS資料。</p><hr><h3 id="Google-Fusion-Table："><a href="#Google-Fusion-Table：" class="headerlink" title="Google Fusion Table："></a>Google Fusion Table：</h3><ol><li><p>Fusion Table是在Google雲端上的一個功能，在Google雲端新增處可選擇<br><img src="https://ithelp.ithome.com.tw/upload/images/20171227/20107816IqfkzFy4YM.png" alt="https://ithelp.ithome.com.tw/upload/images/20171227/20107816IqfkzFy4YM.png"></p></li><li><p>如果找不到，請按 <strong>[連結更多應用程式]</strong> ，搜尋後找到<br><img src="https://ithelp.ithome.com.tw/upload/images/20171227/20107816NJQl8zf1YD.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20171227/20107816NJQl8zf1YD.jpg"></p></li><li><p>fusion table有幾種匯入資料的方式，這邊直接把剛剛的csv匯入，可能要注意一下編碼，中文字常會出現Big5/UTF8的問題<br><img src="https://ithelp.ithome.com.tw/upload/images/20171227/20107816Fa1zxYIfh3.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20171227/20107816Fa1zxYIfh3.jpg"></p></li></ol><ol><li><p>然後會是一些設定(沒啥問題就下一步然後完成)<br><img src="https://ithelp.ithome.com.tw/upload/images/20171227/20107816NtSRqap8Uk.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20171227/20107816NtSRqap8Uk.jpg"></p></li><li><p>接著，我們選擇[File]–&gt;[Geocode]<br><img src="https://ithelp.ithome.com.tw/upload/images/20171227/20107816pYd8BJdePj.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20171227/20107816pYd8BJdePj.jpg"></p></li><li><p>Geocode需要設定地址的欄位名稱，設定好後，就直接給它Run下去，需要執行一段時間<br><img src="https://ithelp.ithome.com.tw/upload/images/20171227/201078160FcpfGkEPe.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20171227/201078160FcpfGkEPe.jpg"></p></li><li><p>然後…就完成了，我們切換至map頁籤看結果，<br>這邊其實可以作一些視覺化設定，包含marker符號及產生熱區圖(heat map)<br><img src="https://ithelp.ithome.com.tw/upload/images/20171227/201078165vK3FvChhI.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20171227/201078165vK3FvChhI.jpg"></p></li></ol><ol><li>接著我們可以把資料匯出成kml，再透過<a href="https://ithelp.ithome.com.tw/articles/10193938" target="_blank" rel="noopener">[Day 7] 常見的GIS資料格式-轉換篇</a>的程式轉換成想要的格式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line">var KmlStream = require(&quot;kml-stream&quot;);</span><br><span class="line">var data = fs.createReadStream(&apos;./out.kml&apos;).pipe(new KmlStream()).on(&apos;data&apos;, function (d) &#123;</span><br><span class="line">    console.log(d);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><p>在Google Earth可以看到匯出的成果:<br><img src="https://ithelp.ithome.com.tw/upload/images/20171227/20107816JQLHpG6d2A.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20171227/20107816JQLHpG6d2A.jpg"></p><hr><h3 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h3><p>fusion table是一個快速地址對位的工具，但由於Google門牌資料庫完整度及更新頻率並不是這麼高，正確性及完整性可以還有一些限制，但已經可以滿足大多數需求，有了這個功能，只要手邊有地址，就可以<strong>自己的GIS資料自己產啦</strong>。</p><p>而fusion table其實是基於<a href="https://developers.google.com/maps/documentation/geocoding/intro?hl=zh-tw" target="_blank" rel="noopener">Google Geocode Api</a>，所以每天只能request2500筆。</p><p>另外，這幾天在蒐集資料時，發現<a href="https://kuro.tw/posts/2015/10/15/using-google-fusion-table-without-writing-code-or-topic-maps/" target="_blank" rel="noopener">Kuro大大</a>之前也非常完整的介紹Fusion Table，或許大家也可以參考唷!</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2018鐵人賽-30天打造我的WebGIS系列 </tag>
            
            <tag> web </tag>
            
            <tag> GIS </tag>
            
            <tag> google </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽Day 7-常見的GIS資料格式-轉換篇</title>
      <link href="/2017/12/26/ironman-2018-day7/"/>
      <url>/2017/12/26/ironman-2018-day7/</url>
      
        <content type="html"><![CDATA[<p>昨天介紹了geojson、shapefile、kml基本概念，今天我們簡單用npm上面的工具寫個簡單轉換，有關node.js的安裝及使用請各位參考其他線上教學資源，這邊我們就直接使用囉。</p><a id="more"></a><h2 id="gt-本文是參加鐵人賽的文章，同步發表於-“2018鐵人賽-30天打造我的WebGIS系列”"><a href="#gt-本文是參加鐵人賽的文章，同步發表於-“2018鐵人賽-30天打造我的WebGIS系列”" class="headerlink" title="&gt; 本文是參加鐵人賽的文章，同步發表於 “2018鐵人賽-30天打造我的WebGIS系列”"></a>&gt; 本文是參加鐵人賽的文章，同步發表於 <a href="https://ithelp.ithome.com.tw/users/20107816/ironman/1541" target="_blank" rel="noopener">“2018鐵人賽-30天打造我的WebGIS系列”</a></h2><h3 id="geojson資料轉換工具："><a href="#geojson資料轉換工具：" class="headerlink" title="geojson資料轉換工具："></a>geojson資料轉換工具：</h3><p>這邊使用npm上的<a href="https://www.npmjs.com/package/geojson2" target="_blank" rel="noopener">geojson2</a>，直接安裝：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install geojson2</span><br></pre></td></tr></table></figure><p>建立test.js，寫一個geojson2.kml的轉換<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var geojson2 = require(&apos;geojson2&apos;);</span><br><span class="line">geojson2.kml(&apos;test.geojson&apos;, &apos;./out.kml&apos;, function (err) &#123;</span><br><span class="line">    console.log(&quot;finish&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>執行<br><code>node test.js</code></p><p>結果out.kml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span><br><span class="line">&lt;kml xmlns=&quot;http://www.opengis.net/kml/2.2&quot;&gt;</span><br><span class="line">&lt;Document id=&quot;root_doc&quot;&gt;</span><br><span class="line">&lt;Folder&gt;&lt;name&gt;OGRGeoJSON&lt;/name&gt;</span><br><span class="line">  &lt;Placemark&gt;</span><br><span class="line">&lt;name&gt;Dinagat Islands&lt;/name&gt;</span><br><span class="line">      &lt;Point&gt;&lt;coordinates&gt;125.6,10.1&lt;/coordinates&gt;&lt;/Point&gt;</span><br><span class="line">  &lt;/Placemark&gt;</span><br><span class="line">&lt;/Folder&gt;</span><br><span class="line">&lt;/Document&gt;&lt;/kml&gt;</span><br></pre></td></tr></table></figure></p><p>geojson2這個模組，包含了四個子功能</p><ul><li>geojson2csv</li><li>geojson2shape</li><li>geojson2kml</li><li>geojson2topojson</li></ul><p>有需要可以自行測試！</p><blockquote><p>其中官方文件提到，若要輸出kml and shp. 須先安裝gdal<br>Run ‘brew install gdal’ on OSX,<br>or ‘sudo apt-get install gdal’ on linux.</p></blockquote><hr><h3 id="shapefile資料轉換工具："><a href="#shapefile資料轉換工具：" class="headerlink" title="shapefile資料轉換工具："></a>shapefile資料轉換工具：</h3><p>這邊一樣使用NPM上的<a href="https://www.npmjs.com/package/shp2json" target="_blank" rel="noopener">shp2json</a></p><blockquote><p>一樣須先安裝gdal<br>Run ‘brew install gdal’ on OSX,<br>or ‘sudo apt-get install gdal’ on linux.</p></blockquote><p>安裝<br><code>npm install shp2json.</code></p><p>建立test.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var toJSON = require(&apos;shp2json&apos;);</span><br><span class="line">var result = toJSON.fromShpFile(&apos;out.shp&apos;).pipe(process.stdout);</span><br><span class="line">console.log(result);</span><br></pre></td></tr></table></figure></p><p>執行<br><code>node test.js</code></p><p>結果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;type&quot;: &quot;FeatureCollection&quot;, </span><br><span class="line">    &quot;features&quot;: </span><br><span class="line">    [</span><br><span class="line">        &#123; </span><br><span class="line">            &quot;type&quot;: &quot;Feature&quot;, </span><br><span class="line">            &quot;properties&quot;: &#123; &quot;name&quot;: &quot;Dinagat Islands&quot; &#125;, </span><br><span class="line">            &quot;geometry&quot;: &#123; &quot;type&quot;: &quot;Point&quot;, &quot;coordinates&quot;: [125.6, 10.1] &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="kml資料轉換工具："><a href="#kml資料轉換工具：" class="headerlink" title="kml資料轉換工具："></a>kml資料轉換工具：</h3><p>使用NPM上的<a href="https://www.npmjs.com/package/kml-stream" target="_blank" rel="noopener">kml-stream</a></p><p>安裝kml-stream<br><code>npm install kml-stream</code></p><p>test.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line">var KmlStream = require(&quot;kml-stream&quot;);</span><br><span class="line">var data = fs.createReadStream(&apos;./out.kml&apos;).pipe(new KmlStream()).on(&apos;data&apos;, function (d) &#123;</span><br><span class="line">    console.log(d);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>執行<br><code>node test.js</code></p><p>結果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    type: &apos;Feature&apos;,</span><br><span class="line">    properties: &#123; &#125;,</span><br><span class="line">    geometry: &#123; type: &apos;Point&apos;, coordinates: [125.6, 10.1] &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h3><p>基本上只要掌握了這三類資料互轉，大多數webgis線上資源的格式應該幾乎可以掌握了，後續如果真的有其他GIS資料轉換及讀取的問題，建議可進一步研究專業的GIS軟體：<a href="https://www.qgis.org/en/site/" target="_blank" rel="noopener">QGIS</a>，由於本次鐵人賽的目標是快速上手webgis，比較可惜無法操作太多QGIS，QGIS無論在轉檔、分析及處理等功能都很強大，可以自行試看看唷。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2018鐵人賽-30天打造我的WebGIS系列 </tag>
            
            <tag> GIS </tag>
            
            <tag> Node </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽Day 6-常見的GIS資料格式</title>
      <link href="/2017/12/25/ironman-2018-day6/"/>
      <url>/2017/12/25/ironman-2018-day6/</url>
      
        <content type="html"><![CDATA[<p>前兩天我們先用CARTO(CartoDB)實作了一些基本的GIS資料視覺化，接觸了GIS資料。</p><p>延續 <strong><a href="https://ithelp.ithome.com.tw/articles/10192948" target="_blank" rel="noopener">[Day3]  談互操作性及Web Map Service 標準</a>議題</strong>，我們在處理資料時可能會遇到各種GIS格式，今日就來攻略幾種<strong>web常用的GIS資料格式</strong>。</p><a id="more"></a><blockquote><p>本文是參加鐵人賽的文章，同步發表於 <a href="https://ithelp.ithome.com.tw/users/20107816/ironman/1541" target="_blank" rel="noopener">“2018鐵人賽-30天打造我的WebGIS系列”</a></p></blockquote><h2 id="先釐清一下資料型態"><a href="#先釐清一下資料型態" class="headerlink" title="先釐清一下資料型態"></a>先釐清一下資料型態</h2><p>根據教科書，所謂GIS資料就是具備空間資訊的資料，依照資料型態可以分成兩類</p><ul><li>網格資料(raster)</li><li>向量資料(vector)</li></ul><h3 id="網格資料："><a href="#網格資料：" class="headerlink" title="網格資料："></a>網格資料：</h3><p>網格資料指的通常是影像類型等<strong>規則網格</strong>的資料，例如衛星影像、高程模型(用來表示地形)，以像元(pixel)為基礎，每個pixel會有一些資訊如R,G,B, 或是深度、高度，等，賦予每一個pixel對應的空間坐標，就是一個網格式GIS資料，而賦予坐標的做法通常是定義<strong>網格大小、起始網格坐標、以及方向</strong>，定義這些資訊的檔案稱作 <strong><a href="http://webhelp.esri.com/arcims/9.3/General/topics/author_world_files.htm" target="_blank" rel="noopener">world file</a></strong>，常用的格式如geotiff、tiff、jpg、bmp等影像檔具有world file都屬於此類。</p><h3 id="向量資料："><a href="#向量資料：" class="headerlink" title="向量資料："></a>向量資料：</h3><p>比起網格式資料可能都是使用專業人員處理好的資料，向量式資料在應用上常見得多，又依表示方法分成：<strong>點、線、面</strong>（註）</p><blockquote><p>註：點線面是統稱，在2D 又可細分為multi points, multi polygon…etc. 在3D GIS的世界，相關格式另有一片天….。</p></blockquote><hr><h2 id="本篇主要談的資料格式屬於向量式資料"><a href="#本篇主要談的資料格式屬於向量式資料" class="headerlink" title="本篇主要談的資料格式屬於向量式資料"></a>本篇主要談的資料格式屬於向量式資料</h2><h3 id="geojson-http-geojson-org"><a href="#geojson-http-geojson-org" class="headerlink" title="geojson (http://geojson.org/)"></a>geojson (<a href="http://geojson.org/" target="_blank" rel="noopener">http://geojson.org/</a>)</h3><p>geojson我們在第二天的範例中就已經在地圖上介接了一個開放資料範例，而跟前幾天提到GIS常用的OGC標準不同，<strong>geojson非OGC標準，是由IETF(Internet Engineering Task Force)組織訂定的</strong>，因為是json物件的方式表現，使用起來可說是簡單好用，於webgis廣為流通，目前版本的<a href="https://en.wikipedia.org/wiki/GeoJSON" target="_blank" rel="noopener">geojson(RFC 7946)</a>具有以下特徵：</p><ul><li>JSON，流通方便</li><li><p>一個geojson結構如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;type&quot;: &quot;Feature&quot;,</span><br><span class="line">  &quot;geometry&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;Point&quot;,</span><br><span class="line">    &quot;coordinates&quot;: [125.6, 10.1]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;name&quot;: &quot;Dinagat Islands&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>幾何樣態（geometry Type）：Point, LineString, Polygon, MultiPoint, MultiLineString, and MultiPolygon</p></li><li>坐標(coordinates)：不同幾何形態有不同坐標值記錄方式，可以參考 <strong><a href="https://en.wikipedia.org/wiki/GeoJSON" target="_blank" rel="noopener">wiki範例</a></strong>，而且並沒有定義投影坐標系統的欄位，通常默認為EPSG4326(也就是wgs84經緯度)</li><li>屬性(properties)：在properties以key-value方式記錄每一筆資料的屬性欄位</li></ul><h3 id="ESRI-shapefile-shp"><a href="#ESRI-shapefile-shp" class="headerlink" title="ESRI shapefile(shp)"></a>ESRI shapefile(shp)</h3><p>shapefile在GIS領域廣為使用多年，目前仍廣泛使用中，它是GIS應用軟體供應商ESRI定義的格式，亦已部分公開相關結構，大多數GIS軟體(如QGIS、Arcgis等)也都支援。<br>要解析shapefile，可參考github上有許多shapefile library，而一個shapefile通常包含很多附屬檔案(<a href="https://zh.wikipedia.org/wiki/Shapefile#cite_note-esri98-1" target="_blank" rel="noopener">wiki</a>)：</p><ul><li>Shapefile圖形格式 (.shp)</li><li>Shapefile圖形索引格式(.shx)</li><li>Shapefile屬性格式(.dbf)，屬性資料庫</li><li>Shapefile投影格式(.prj)，紀錄坐標系統</li><li>Shapefile空間索引格式(.sbn)</li></ul><p>一個shapefile只會有一種幾何形態，共支援Point, Polyline, Polygon, 等13類的幾何型態資料，更多shape資料問題可參考<a href="https://zh.wikipedia.org/wiki/Shapefile#cite_note-esri98-1" target="_blank" rel="noopener">wiki</a>。</p><p>這邊要特別分享一個小小使用經驗：</p><blockquote><p>shapefile因為具有(.prj)檔案記錄投影坐標系統的特性，與geojson有個不同的地方在於它可以使用不同的坐標系統(一般來說geojson都是使用ESPG4326，也就是wgs84經緯度)，我們拿到一份shapefile可能會是各式各樣坐標系統，這些坐標值是存在shp內，<strong>當我們偶爾會拿到沒有prj檔的shapefile時，可能會遇到對於shp內坐標值到底是啥而一頭霧水的現象，這時便需要經驗判斷資料的坐標系統喔！</strong>(關於坐標系統，預計過兩天再來攻略^^)</p></blockquote><h2 id="kml"><a href="#kml" class="headerlink" title="kml"></a>kml</h2><p>kml是OGC規範格式，廣泛用於Google Earth等平台上，它是xml方式表達GIS資料，並且包含了其在Google Earth上的樣式資料，基本上都使用ESPG4326的經緯度坐標，範例如下(<a href="https://en.wikipedia.org/wiki/Keyhole_Markup_Language" target="_blank" rel="noopener">wiki</a>)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;kml xmlns=&quot;http://www.opengis.net/kml/2.2&quot;&gt;</span><br><span class="line">&lt;Document&gt;</span><br><span class="line">&lt;Placemark&gt;</span><br><span class="line">  &lt;name&gt;New York City&lt;/name&gt;</span><br><span class="line">  &lt;description&gt;New York City&lt;/description&gt;</span><br><span class="line">  &lt;Point&gt;</span><br><span class="line">    &lt;coordinates&gt;-74.006393,40.714172,0&lt;/coordinates&gt;</span><br><span class="line">  &lt;/Point&gt;</span><br><span class="line">&lt;/Placemark&gt;</span><br><span class="line">&lt;/Document&gt;</span><br><span class="line">&lt;/kml&gt;</span><br></pre></td></tr></table></figure></p><p>在我過去使用kml的經驗，Google Earth對於kml在樣式屬性上實在非常具有彈性，他甚至可以定義其在Google Earth上的Popup內容、視角、事件等等，個人覺得算是很單純但又很難掌握(ㄊㄠˇ 一ㄢˋ)的格式(樣式部分)</p><h2 id="topojson"><a href="#topojson" class="headerlink" title="topojson"></a>topojson</h2><p>topojson是geojson的擴充，大致上是基於geojson但具<strong>資訊壓縮</strong>並考量<strong>位相關係</strong>的(<a href="https://en.wikipedia.org/wiki/Geospatial_topology" target="_blank" rel="noopener">topology</a>)的資料格式(<a href="https://github.com/topojson/topojson-specification#1-introduction" target="_blank" rel="noopener">請參考topojson spec文件</a>)，<strong>廣泛用於webgis及d3.js資料視覺化</strong>(作者同時也是d3.js作者Mike Bostock)，關於topojson詳細的規格可以直接參考文件，在這邊我們先快速來看看一個Taiwan.TopoJSON範例(因長度關係，請直接前往<a href="https://github.com/jason2506/Taiwan.TopoJSON/blame/master/topojson/towns/towns-09007.json" target="_blank" rel="noopener">github上的範例</a>)。</p><p>拿到資料後，我們把資料複製到<a href="http://jsoneditoronline.org" target="_blank" rel="noopener">json edirtor</a>檢視：<br><img src="https://ithelp.ithome.com.tw/upload/images/20171225/201078169w5CgPveJz.jpg" alt="https://ithelp.ithome.com.tw/upload/images/20171225/201078169w5CgPveJz.jpg"></p><p>從資料格式架構中可以看到，topojson相較於geojson多增加了幾個項目:bbox、transform、arcs</p><ul><li>bbox: 記錄的是這份geojson的邊界</li><li>transfrom: 記錄<strong>兩個尺度</strong>及<strong>兩個平移參數</strong>，在topojson中為了減少記錄位數，坐標都是用int方式記錄，再靠transform參數還原</li><li>arcs: 記錄資料中的邊，arcs分兩個部分，<strong>一個是最外層的arcs記錄所有的邊</strong>，<strong>第二個是每個幾何物件中的arcs記錄的為arc index</strong>，每個幾何物件內的arcs都參照最外層arcs，如此是以共邊的概念記錄每個物件的幾何，減低資料量並保有位相關係(topology)</li><li>objects: GIS資料物件陣列，包含幾何及屬性</li></ul><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>geojson、shapefile、kml在webgis中最常被用到，資料交換也常依賴這幾類格式，大多數webgis平台都支援這些資料形式，因此大家一定會碰到，今天先介紹這些格式，明天預計來攻略這幾類的資料轉換(這應該才是最重要的^^)。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2018鐵人賽-30天打造我的WebGIS系列 </tag>
            
            <tag> web </tag>
            
            <tag> GIS </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽Day 3-談互操作性及Web service 標準</title>
      <link href="/2017/12/22/ironman-2018-day3/"/>
      <url>/2017/12/22/ironman-2018-day3/</url>
      
        <content type="html"><![CDATA[<p>前一天用了Leaflet了一個地圖，並接了國土測繪中心的WMTS跟一個geojson，像是WMTS(Web Map Tile Service)這類web service已廣泛流通於webgis世界，今天試著來使用這些標準。</p><h1 id="Interoperability-amp-Standard"><a href="#Interoperability-amp-Standard" class="headerlink" title="Interoperability &amp; Standard"></a>Interoperability &amp; Standard</h1><p>在進入今天的主題「空間資料的格式及標準」之前，先來個名詞解釋—Interoperability。<br>Interoperability中文為<strong>互操作性</strong>，IEEE對於互操作性的定義如下(<a href="https://zh.wikipedia.org/wiki/%E4%BA%92%E6%93%8D%E4%BD%9C%E6%80%A7" target="_blank" rel="noopener">維基百科</a>)</p><blockquote><p><strong>兩個或多個系統之間交換信息之能力，以及對交換的信息加以使用之能力</strong></p></blockquote><a id="more"></a><blockquote><p>本文是參加鐵人賽的文章，同步發表於 <a href="https://ithelp.ithome.com.tw/users/20107816/ironman/1541" target="_blank" rel="noopener">“2018鐵人賽-30天打造我的WebGIS系列”</a></p></blockquote><p>看完這句話，或許各位還是對於interoperability感到抽象。各位可以想像一下，若兩千多年前秦始皇沒有統一文字、統一度量衡、統一貨幣，那會是個什麼樣的狀況？是不是大家難以溝通，公說公有理，婆說婆有理，無法達到「共識」。</p><p>為了解決這樣<strong>異質性</strong>的問題，「標準」(standard)就因此誕生了！大家只要遵照著標準，就能夠理解對方所說的話、做的事，達到互操作性。</p><p>那標準是誰來訂定的呢？其實世界上有許多不為人知的標準組織為各自領域努力建立標準（像螞蟻～默默做自己～～）。標準組織百百種，而最有名的就屬<strong>ISO　(International Organization for Standardization)</strong>。由於組織規模大，其所訂定的標準也是包山包海，像是常聽到的ISO 9001（品質管理系統）、ISO 22000（食品安全管理系統）及ISO 27001（資訊安全管理系統）等驗證均是由ISO國際標準組織所制訂。</p><hr><p><img src="https://i.imgur.com/najbKw3.png" alt=""><br>而地理資訊的開放標準是由一個叫 <strong>OGC(Open Geospatial Consortium)</strong> 的組織來訂定。OGC成立於1994年，是一個國際的非營利組織，由許多公司、政府單位及學術研究機構所組成。其建立了50多項地理資訊標準（<a href="http://www.opengeospatial.org/" target="_blank" rel="noopener">官方網站</a>），如</p><ul><li>KML，為用於Google Earth展示向量資料（點、線、面）的檔案格式。</li><li>WMS(Web Map Service)為網路地圖服務。</li><li>WMTS(Web Map Tile Service)也是地圖服務，和WMS不同的是WMTS是提供地圖的「圖磚」(Tiles)，也就是把地圖切成一小塊一小塊給用戶端，提高展示效能。</li><li>WFS(Web Feature Service)是負責提供向量資料的服務。</li><li>SOS(Sensor Observation Service)則是提供感測器資料，如雨量、氣溫等觀測資料的服務。</li></ul><p>另外其他許多OGC標準的網路服務或資料格式，族繁不及備載。除了OGC，ESRI的Shapefile也是常見的地理資料標準，但並不是開放標準。<br><strong>註:常見的geojson也非OGC標準，這些資料格式後面幾天找機會攻略</strong></p><h1 id="WMS使用教學"><a href="#WMS使用教學" class="headerlink" title="WMS使用教學"></a>WMS使用教學</h1><p>上面提到那麼多OGC的網路服務，包含我們前一天接的WMTS也屬其中之一，這邊就挑WMS來為各位示範如何透過WMS來取得地圖。</p><p>取得地圖分為兩個步驟，分別是<strong>GetCapabilities</strong>以及<strong>GetMap</strong>。</p><ul><li>GetCapabilities就是取得網路服務的<strong>詮釋資料（metadata）</strong>，意思是先看看這個服務提供哪些地圖？地圖範圍如何？坐標系統是什麼？諸如此類的資料描述都會在這個步驟取得，才能夠決定你要哪張地圖。</li><li>而GetMap則是根據上一步驟的資訊，向服務提出取得地圖的要求。</li></ul><h3 id="範例如下："><a href="#範例如下：" class="headerlink" title="範例如下："></a>範例如下：</h3><ol><li>在WMS服務網址 <a href="https://neo.sci.gsfc.nasa.gov/wms/wms" target="_blank" rel="noopener">https://neo.sci.gsfc.nasa.gov/wms/wms</a> 後加上request參數<br>?service=WMS&amp;request=GetCapabilities，代表對WMS服務寄送一個GetCapabilities的要求，如下所示。若要求成功會收到一份XML資料，<br>:::success<br><a href="https://neo.sci.gsfc.nasa.gov/wms/wms?service=WMS&amp;request=GetCapabilities" target="_blank" rel="noopener">https://neo.sci.gsfc.nasa.gov/wms/wms?service=WMS&amp;request=GetCapabilities</a><br>:::</li><li>我們先跳到GetMap要求，GetMap要求所需的參數如下：</li></ol><table><thead><tr><th style="text-align:left">參數</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><strong>version</strong>=VERSION</td><td style="text-align:left">WMS版本</td></tr><tr><td style="text-align:left"><strong>request</strong>=GetMap</td><td style="text-align:left">對WMS送GetMap request</td></tr><tr><td style="text-align:left"><strong>layers</strong>=LAYERNAME</td><td style="text-align:left">WMS的地圖單位為Layer，此參數為Layer名稱</td></tr><tr><td style="text-align:left"><strong>style</strong>=STYLE</td><td style="text-align:left">黑白或彩色影像</td></tr><tr><td style="text-align:left"><strong>crs</strong>=CRS</td><td style="text-align:left">坐標系統</td></tr><tr><td style="text-align:left"><strong>bbox</strong>=MINX,MINY,MAXX,MAXY</td><td style="text-align:left">欲取得的地圖範圍</td></tr><tr><td style="text-align:left"><strong>width</strong>=WIDTH</td><td style="text-align:left">輸出地圖寬度</td></tr><tr><td style="text-align:left"><strong>height</strong>=HEIGHT</td><td style="text-align:left">輸出地圖高度</td></tr><tr><td style="text-align:left"><strong>format</strong>=FORMAT</td><td style="text-align:left">輸出地圖格式</td></tr></tbody></table><p>而這些參數就是從步驟一的Capabilities XML來取得。</p><p><img src="https://i.imgur.com/4vbDZjx.png" alt=""></p><p><img src="https://i.imgur.com/vxwa1jg.png" alt=""></p><p>GetMap要求範例如下：<br>:::success<br><a href="https://neo.sci.gsfc.nasa.gov/wms/wms?version=1.3.0&amp;request=GetMap&amp;layers=MOD14A1_M_FIRE&amp;style=rgb&amp;crs=CRS:84&amp;bbox=-180,-90,180,90&amp;width=720&amp;height=360&amp;format=image/png" target="_blank" rel="noopener">https://neo.sci.gsfc.nasa.gov/wms/wms?version=1.3.0&amp;request=GetMap&amp;layers=MOD14A1_M_FIRE&amp;style=rgb&amp;crs=CRS:84&amp;bbox=-180,-90,180,90&amp;width=720&amp;height=360&amp;format=image/png</a><br>:::</p><p>得到的Map如下：<br><img src="https://i.imgur.com/2dhZq01.png" alt=""></p><p>用一個GET request的方式就能夠得到一張地圖影像，使用者只需根據自己的需求來調整參數，是不是很方便呢？</p><h1 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h1><p>隨這網際網路的發展，地理資訊也逐漸朝向WebGIS的方向前進。越來越多人能夠透過網路交流地理資訊，因此標準及網路服務即是奠定的基礎。</p><p>像是Leaflet.js這類的前端地圖框架，當然支援WMS標準的資料介接，也因此我們可以使用它們<a href="http://leafletjs.com/reference-1.2.0.html#tilelayer-wms" target="_blank" rel="noopener">官方文件</a>的方法去接地圖資料，例如我們昨天使用的內政部國土測繪中心WMTS <strong>(WMTS即是WMS加入<a href="https://en.wikipedia.org/wiki/Tiled_web_map" target="_blank" rel="noopener">Tiled web map</a>的概念</strong>，加快服務存取效率)。</p><p>今天主要整理了WMS的說明，後續仍有webGIS會遇到的各種<strong>GIS格式</strong>及<strong>坐標系統</strong>攻略，在介紹資料之前，接下來兩天會先用一些線上GIS資料視覺化SDK，看一下GIS資料可以怎麼用。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2018鐵人賽-30天打造我的WebGIS系列 </tag>
            
            <tag> web </tag>
            
            <tag> GIS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽Day 2-webGIS初步</title>
      <link href="/2017/12/21/ironman-2018-day2/"/>
      <url>/2017/12/21/ironman-2018-day2/</url>
      
        <content type="html"><![CDATA[<h2 id="webgis：從Client端及Server端談起"><a href="#webgis：從Client端及Server端談起" class="headerlink" title="webgis：從Client端及Server端談起"></a>webgis：從Client端及Server端談起</h2><h3 id="Clinet端："><a href="#Clinet端：" class="headerlink" title="Clinet端："></a>Clinet端：</h3><p>跟一般網頁應用程式一樣，webgis需要前端程式與使用者互動，要開發一個webgis，開發者可以使用各種前端框架。<br>然而，要炒一盤webgis的菜，就必須要有專屬於gis/地圖的前端框架</p><blockquote><p>本文是參加鐵人賽的文章，同步發表於 <a href="https://ithelp.ithome.com.tw/users/20107816/ironman/1541" target="_blank" rel="noopener">“2018鐵人賽-30天打造我的WebGIS系列”</a></p></blockquote><p><strong>這些框架主要功能包含提供地圖，圖層渲染，基本地圖互動、介接資料等功能，Javascript常見的webgis框架包含:</strong></p><blockquote><ul><li>(1)leaflet</li><li>(2)openlayers</li><li>(3)google maps api</li><li>(4)esri javascript api</li></ul></blockquote><p>一個地圖框架提供我們基本地圖操作，把地圖元素(含空間坐標物件)轉換成前端可操作的元件(DOM等)，而為使地圖互動更生動活潑，其它前端工具當然也是可以整合進來的，包含Jquery, Vue, React, Angularjs…甚至D3.js, C3.js等可能都需要整合在webGIS中。</p><a id="more"></a><h3 id="Server端：Web-service及資料庫"><a href="#Server端：Web-service及資料庫" class="headerlink" title="Server端：Web service及資料庫"></a>Server端：Web service及資料庫</h3><p>在webGIS應用程式中，可以透過Web service來進行資料操作，這之中最常使用到的是<strong>網路圖磚服務(WMTS)</strong>，例如我們透過 <strong><a href="https://developers.google.com/maps/documentation/javascript/tutorial?hl=zh-tw" target="_blank" rel="noopener">Google maps api</a></strong> 在網頁之中建立一個地圖，這時可以看到Google maps的底圖，這個底圖服務就是透過類似WMTS的概念來實作的。</p><p>另一個面向是資料庫，具有空間資料的資料庫稱作「空間資料庫」，空間資料庫能夠執行各種空間查詢，目前包含<strong>MSSQL(SQL Spatial)</strong>、<strong>Postgressql(PostGIS)</strong>、 <strong>Oracle(Oracel Spatial)</strong>、<strong>MySQL</strong>、<strong>MongoDB</strong>等各大資料庫系統都有支援空間資料庫的格式及模組。</p><h2 id="先直接來個範例"><a href="#先直接來個範例" class="headerlink" title="先直接來個範例"></a>先直接來個範例</h2><p>上面長篇大論講了一堆，<strong>本次鐵人賽的目標是把這些事情說清楚，逐一擊破。</strong></p><p>以下先快速開始一個範例:<br>我們使用leaflet.js new一個地圖並以線上WMTS作為底圖，並把一些資料放上圖台，<br>這樣其實就是最簡單的一個webGIS。</p><p>引入必要元件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/leaflet@1.2.0/dist/leaflet.css&quot; /&gt;</span><br><span class="line">&lt;script src=&quot;https://code.jquery.com/jquery-1.12.4.min.js&quot;</span><br><span class="line">  integrity=&quot;sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=&quot;</span><br><span class="line">  crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/leaflet@1.2.0/dist/leaflet.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>初始化一個地圖並設定中心經緯度為[25.0375928,121.5529563], 比例尺尺度為10的視角<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&apos;map_div&apos; style=&quot;height:100%&quot;&gt;&lt;/div&gt;</span><br><span class="line">var map = L.map(&apos;map_div&apos;).setView([25.0375928,121.5529563], 10);</span><br></pre></td></tr></table></figure></p><p>一個地圖應用都需要底圖，這邊我們使用官方維護的<a href="https://maps.nlsc.gov.tw/S09SOA/" target="_blank" rel="noopener">內政部國土測繪中心wmts</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var basemap = L.tileLayer(&apos;https://wmts.nlsc.gov.tw/wmts/EMAP/default/GoogleMapsCompatible/&#123;z&#125;/&#123;y&#125;/&#123;x&#125;&apos;, &#123;</span><br><span class="line">        attribution: &apos;&amp;copy; &lt;a href=&quot;http://osm.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors&apos;</span><br><span class="line">&#125;).addTo(map);</span><br></pre></td></tr></table></figure></p><p>接下來，webGIS都會有自己的資料，可能是靜態的，也可以是需要資料庫IO的<br>可能需要從Server side 寫一個api接口取資料<br>c#:(示意)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//取資料接口..</span><br><span class="line">[Route(&quot;api/Poi&quot;)]</span><br><span class="line">[httpget] </span><br><span class="line">public JsonResult Poi()</span><br><span class="line">&#123;    </span><br><span class="line">   //Bson collection example [&#123;&quot;name&quot;:&quot;市府店&quot;,&quot;geo&quot;:[25.0375,121.5529]&#125;,&#123;&quot;name&quot;:&quot;西門店&quot;,&quot;geo&quot;:[25.0401,121.509]&#125;....]</span><br><span class="line">   List&lt;PoiDataModel&gt; pois =  List&lt;PoiDataModel&gt;();</span><br><span class="line">   //取資料...</span><br><span class="line">   略..</span><br><span class="line">   return Json(...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>client side:<br>接上面的api,把資料放在地圖上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: &quot;/api/Poi&quot;,</span><br><span class="line">    contentType: &apos;application/json&apos;,</span><br><span class="line">    type: &apos;GET&apos;,</span><br><span class="line">    contentType: &apos;application/json; charset=utf-8&apos;,</span><br><span class="line">    success: function(data) &#123;</span><br><span class="line">         $.each(data.pois, function(k, v) &#123;</span><br><span class="line">            L.marker([v[0], v[1]]).addTo(map)</span><br><span class="line">            .bindPopup(v.name)</span><br><span class="line">            .openPopup();</span><br><span class="line">         &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>另外，可能需要介接其它api資料，我們的範例資料是一個展店的計畫，<br>在此，我們有需求是看看周圍的商家資料。<br>這邊我們介接<a href="https://egis.moea.gov.tw/OpenData/" target="_blank" rel="noopener">經濟部開放資料</a><br><code>說明: A-3 鄰近商家查詢：透過坐標參數，查詢所在位置鄰近商家清冊資料。</code></p><p>接到的資料是geojson，把它們放到地圖上<br>並以不同符號表示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">   url: &quot;https://egis.moea.gov.tw/MoeaEGFxData_WebAPI_Inside/InnoServe/BusinessBUSM?resptype=GeoJson&amp;x=121.509&amp;y=25.0401&amp;buffer=1000&quot;,</span><br><span class="line">   type: &apos;GET&apos;,</span><br><span class="line">   success: function (data) &#123;</span><br><span class="line">       var symbol = &#123;</span><br><span class="line">            radius: 3,</span><br><span class="line">            fillColor: &quot;#ff7800&quot;,</span><br><span class="line">            color: &quot;#000&quot;,</span><br><span class="line">            weight: 1,</span><br><span class="line">            opacity: 1,</span><br><span class="line">            fillOpacity: 0.8</span><br><span class="line">       &#125;;</span><br><span class="line">       L.geoJSON(data, &#123;</span><br><span class="line">            pointToLayer: function (feature, latlng) &#123;</span><br><span class="line">                return L.circleMarker(latlng, symbol);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;).addTo(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>完整程式碼</p><p><strong>client side(map.html):</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/leaflet@1.2.0/dist/leaflet.css&quot; /&gt;</span><br><span class="line">&lt;script src=&quot;https://code.jquery.com/jquery-1.12.4.min.js&quot;</span><br><span class="line">  integrity=&quot;sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=&quot;</span><br><span class="line">  crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://unpkg.com/leaflet@1.2.0/dist/leaflet.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div id=&apos;map_div&apos; style=&quot;height:100%&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">//利用leaflet初始化地圖</span><br><span class="line">var map = L.map(&apos;map_div&apos;).setView([25.0375928,121.5529563], 10);</span><br><span class="line"></span><br><span class="line">//加入內政部國土測繪中心wmts</span><br><span class="line">var basemap=L.tileLayer(&apos;https://wmts.nlsc.gov.tw/wmts/EMAP/default/GoogleMapsCompatible/&#123;z&#125;/&#123;y&#125;/&#123;x&#125;&apos;, &#123;</span><br><span class="line">        attribution: &apos;&amp;copy; &lt;a href=&quot;http://osm.org/copyright&quot;&gt;OpenStreetMap&lt;/a&gt; contributors&apos;</span><br><span class="line">    &#125;).addTo(map);</span><br><span class="line"></span><br><span class="line">//從Server端API接口把POI展在地圖上,並binding一個popup</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    url: &quot;/api/Poi&quot;,</span><br><span class="line">    contentType: &apos;application/json&apos;,</span><br><span class="line">    type: &apos;GET&apos;,</span><br><span class="line">    contentType: &apos;application/json; charset=utf-8&apos;,</span><br><span class="line">    success: function(data) &#123;</span><br><span class="line">         $.each(data.pois, function(k, v) &#123;</span><br><span class="line">            L.marker([v[0], v[1]]).addTo(map)</span><br><span class="line">            .bindPopup(v.name)</span><br><span class="line">            .openPopup();</span><br><span class="line">         &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//介接經濟部商家查詢api</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">   url: &quot;https://egis.moea.gov.tw/MoeaEGFxData_WebAPI_Inside/InnoServe/BusinessBUSM?resptype=GeoJson&amp;x=121.509&amp;y=25.0401&amp;buffer=1000&quot;,</span><br><span class="line">   type: &apos;GET&apos;,</span><br><span class="line">   success: function (data) &#123;</span><br><span class="line">       var symbol = &#123;</span><br><span class="line">            radius: 3,</span><br><span class="line">            fillColor: &quot;#ff7800&quot;,</span><br><span class="line">            color: &quot;#000&quot;,</span><br><span class="line">            weight: 1,</span><br><span class="line">            opacity: 1,</span><br><span class="line">            fillOpacity: 0.8</span><br><span class="line">       &#125;;</span><br><span class="line">       L.geoJSON(data, &#123;</span><br><span class="line">            pointToLayer: function (feature, latlng) &#123;</span><br><span class="line">                return L.circleMarker(latlng, symbol);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;).addTo(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p><strong>server side(ApiController.cs):</strong><br>API接口取資料庫中的據點資料，假設使用mongodb去Query到bson document..<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//取資料接口..</span><br><span class="line">[Route(&quot;api/Poi&quot;)]</span><br><span class="line">[httpget] </span><br><span class="line">public JsonResult Poi()</span><br><span class="line">&#123;    </span><br><span class="line">   //Bson collection example [&#123;&quot;name&quot;:&quot;市府店&quot;,&quot;geo&quot;:[25.0375,121.5529]&#125;,&#123;&quot;name&quot;:&quot;西門店&quot;,&quot;geo&quot;:[25.0401,121.509]&#125;....]</span><br><span class="line">   List&lt;PoiDataModel&gt; pois =  List&lt;PoiDataModel&gt;();</span><br><span class="line">   //取資料...</span><br><span class="line">   略..</span><br><span class="line">   return Json(...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//新增資料接口...</span><br><span class="line">[Route(&quot;api/Poi&quot;)]</span><br><span class="line">[httppost]</span><br><span class="line">public JsonResult GetPois(PoiDataModel poi)</span><br><span class="line">&#123;  </span><br><span class="line">   //新增資料進資料庫...</span><br><span class="line">   略..</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面範例，結果如下:<br><img src="https://ppt.cc/fDOGOx@.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2018鐵人賽-30天打造我的WebGIS系列 </tag>
            
            <tag> web </tag>
            
            <tag> GIS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵人賽Day 1-webGIS:資訊時代的地理大發現</title>
      <link href="/2017/12/20/ironman-2018-day1/"/>
      <url>/2017/12/20/ironman-2018-day1/</url>
      
        <content type="html"><![CDATA[<h2 id="webGIS-資訊時代的地理大發現"><a href="#webGIS-資訊時代的地理大發現" class="headerlink" title="webGIS-資訊時代的地理大發現"></a>webGIS-資訊時代的地理大發現</h2><p>在現代的網頁應用中，地圖應用已經成為了不可或缺的網頁元素，一個現代網頁中，有了地圖應用，可以讓使用者查詢空間資訊；開發者亦可實踐各種<strong>LBS</strong>(Location Based Services)及<strong>IOT</strong>(Internet of Things)的應用。</p><p>目前網路上有許多開發資源可以協助我們建構一些地圖應用，並且透過資料視覺化及UI/UX，使空間資訊有效地呈現給user，user也可以request資訊，讓系統是雙向互動的，相關的應用國內外都有很多案例。</p><p>然而，目前線上整合這些資源且能涵蓋背後相關技術的完整介紹並不多，我們團隊希望藉由<strong>2018 IT邦鐵人賽</strong>機會，除整合資源應用外，再加碼一些GIS相關技術面探討，目標是運用開源軟體，<strong>30天打造一個webGIS系統</strong>。</p><a id="more"></a><blockquote><p>本文是參加鐵人賽的文章，同步發表於 <a href="https://ithelp.ithome.com.tw/users/20107816/ironman/1541" target="_blank" rel="noopener">“2018鐵人賽-30天打造我的WebGIS系列”</a></p></blockquote><h2 id="地圖應用與webGIS"><a href="#地圖應用與webGIS" class="headerlink" title="地圖應用與webGIS"></a>地圖應用與webGIS</h2><p>GIS是地理資訊系統(Geographical Information System)的英文縮寫，GIS在學術及產業應用上發展已經蓬勃發展數十年，而<strong>webGIS簡單來說就是把GIS應用在網頁相關平台上</strong>。</p><p>根據GIS應用軟體供應商龍頭Esri的定義：</p><blockquote><p>In its simplest form, web GIS can be defined as any GIS that uses web technology to communicate between a server and a client (Esri)</p></blockquote><p>更具體一點，Esri認為webGIS包含以下元素</p><blockquote><ul><li>The server has a URL so that clients can find it on the web.</li><li>The client relies on HTTP specifications to send - requests to the server.</li><li>The server performs the requested GIS operations and &gt; sends responses to the client via HTTP.</li><li>The format of the response sent to the client can be in many formats, such as HTML, binary image, XML (Extensible Markup Language), or JSON (JavaScript Object Notation).</li></ul></blockquote><p>上述文字基本上描述了webGIS的核心，在此我們可以加以擴充，有了webGIS技術，配合前後端技術的整合，得以讓網頁加入地圖應用元素。</p><blockquote><p>參考文獻: <a href="http://www.geo-jobe.com/videos/web-gis-explained-5-essential-elements-web-gis/" target="_blank" rel="noopener">http://www.geo-jobe.com/videos/web-gis-explained-5-essential-elements-web-gis/</a></p></blockquote><h2 id="規劃架構"><a href="#規劃架構" class="headerlink" title="規劃架構"></a>規劃架構</h2><p>以下是擬定的架構，希望能完整走過：</p><ul><li>開發之前，先暸解資料：GIS資料基本概念、資料處理、如何自製資料 </li><li>一些既有的線上SDK: CARTO, Google Fusion table</li><li>webGIS開發資源: 資源介紹, 創造資源(OSM)</li><li>資源實作: 開始整合各種接API</li><li>進階處理: 空間資料庫處理、空間運算</li><li>綜合演練</li></ul><h2 id="關於作者"><a href="#關於作者" class="headerlink" title="關於作者"></a>關於作者</h2><p>服務於國內知名工程顧問公司的GIS應用開發團隊，希望藉由此次經驗，強化自己對開源軟體及本身核心技術的暸解！</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2018鐵人賽-30天打造我的WebGIS系列 </tag>
            
            <tag> web </tag>
            
            <tag> GIS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>annaconda python環境快速搭建</title>
      <link href="/2017/08/26/annaconda/"/>
      <url>/2017/08/26/annaconda/</url>
      
        <content type="html"><![CDATA[<p>annoconda快速搭建</p><h1 id="1-下載"><a href="#1-下載" class="headerlink" title="1.下載"></a>1.下載</h1><p>–<br>首先去annconda<a href="https://www.continuum.io/downloads" target="_blank" rel="noopener">官網</a>下載<br>選擇x64環境或是x86之安裝檔<br>例如要跑arcpy必須在x86 環境執行<br>經測試x86 跟x64 annaconda可以並存</p><h1 id="2-安裝"><a href="#2-安裝" class="headerlink" title="2. 安裝"></a>2. 安裝</h1><h3 id="1-一鍵安裝Anaconda"><a href="#1-一鍵安裝Anaconda" class="headerlink" title="1.一鍵安裝Anaconda"></a>1.一鍵安裝Anaconda</h3><h3 id="2-Anaconda-Navigator"><a href="#2-Anaconda-Navigator" class="headerlink" title="2.Anaconda Navigator"></a>2.Anaconda Navigator</h3><ul><li>設定環境(例如設定python2.7, python3.6環境)</li></ul><h3 id="3-使用conda-prompt"><a href="#3-使用conda-prompt" class="headerlink" title="3.使用conda prompt"></a>3.使用conda prompt</h3><ul><li>pip install 可擴充相關模組</li></ul><h3 id="4-IPython"><a href="#4-IPython" class="headerlink" title="4.IPython"></a>4.IPython</h3><ul><li>逐行操作</li></ul><h3 id="5-使用spyder"><a href="#5-使用spyder" class="headerlink" title="5.使用spyder"></a>5.使用spyder</h3><ul><li>run, variable viewer</li></ul><h1 id="3-模組"><a href="#3-模組" class="headerlink" title="3.模組"></a>3.模組</h1><h3 id="1-Anaconda-32bit-with-python2-7"><a href="#1-Anaconda-32bit-with-python2-7" class="headerlink" title="1.Anaconda 32bit- with python2.7"></a>1.Anaconda 32bit- with python2.7</h3><h3 id="2-Archook-Arcpy"><a href="#2-Archook-Arcpy" class="headerlink" title="2.Archook Arcpy"></a>2.Archook Arcpy</h3><ul><li>找尋環境中的python路徑 -<a href="https://github.com/JamesRamm/archook" target="_blank" rel="noopener">Github Githook</a></li><li>pip install archook<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python=1</span><br><span class="line">import archook #The module which locates arcgis</span><br><span class="line">archook.get_arcpy()</span><br><span class="line">import arcpy</span><br><span class="line"></span><br><span class="line">#下面就可以寫python了#</span><br></pre></td></tr></table></figure></li></ul><h1 id="4-基本操作"><a href="#4-基本操作" class="headerlink" title="4.基本操作"></a>4.基本操作</h1><h3 id="1-if"><a href="#1-if" class="headerlink" title="1.if"></a>1.if</h3><h3 id="2-for"><a href="#2-for" class="headerlink" title="2.for"></a>2.for</h3><h3 id="3-list-array-tuple"><a href="#3-list-array-tuple" class="headerlink" title="3.list, array,tuple"></a>3.list, array,tuple</h3><p>============================</p><h1 id="5-常用模組"><a href="#5-常用模組" class="headerlink" title="5.常用模組"></a>5.常用模組</h1><h3 id="1-shapefile"><a href="#1-shapefile" class="headerlink" title="1.shapefile"></a>1.shapefile</h3><h3 id="2-math-csv"><a href="#2-math-csv" class="headerlink" title="2.math,csv"></a>2.math,csv</h3><h3 id="3-繪圖matplotlib"><a href="#3-繪圖matplotlib" class="headerlink" title="3.繪圖matplotlib"></a>3.繪圖matplotlib</h3>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/2017/08/25/hello-world/"/>
      <url>/2017/08/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Hexo 是基於node.js 開發的部落格框架，文章內容主要是以markdown撰寫，並可藉由hexo-git-deploy部署到 <a href="https://pages.github.com/" target="_blank" rel="noopener">Github pages</a>靜態網頁服務<br>部署完成後網址: https://&lt;帳號&gt;.github.io</p><ul><li>官網 <a href="https://hexo.io/zh-tw/index.html" target="_blank" rel="noopener">Hexo</a>  ps.似乎國人開發的</li><li>主題包 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">themes</a></li></ul><p>搭建Hexo步驟如下</p><ul><li>安裝Node.js</li><li><p>安裝Hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo -g</span><br></pre></td></tr></table></figure></li><li><p>創建專案資料夾，並在裡面初始化<br>初始化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></li><li><p>喜好設定 _config.yml （可使用預設）</p><ul><li><p>喜好設定 下載next主題(官網有很多主題)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure></li><li><p>喜好設定 修改_config.yml的theme為next </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- theme: next</span><br></pre></td></tr></table></figure></li><li><p>喜好設定 修改theme/next/_config.yml的menu項目自定義選單 </p></li></ul></li><li><p>如果要新增貼文 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new post hello world</span><br></pre></td></tr></table></figure></li><li><p>如果要新增頁面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page about</span><br></pre></td></tr></table></figure></li><li><p>編譯</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></li><li><p>在本機運行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></li><li><p>如要部署到Github.io</p><ul><li>創建一個repository名稱為&lt;帳號&gt;.github.io</li><li>在repository開通Github pages</li></ul></li><li><p>設定好 _config.yml 的 deploy參數 (github), 部署</p><h2 id="Docs-https-hexo-io-docs-deployment-html"><a href="#Docs-https-hexo-io-docs-deployment-html" class="headerlink" title="Docs: https://hexo.io/docs/deployment.html"></a>Docs: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">https://hexo.io/docs/deployment.html</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repository: git@github.com:&lt;帳號&gt;/&lt;帳號&gt;.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo delploy</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
